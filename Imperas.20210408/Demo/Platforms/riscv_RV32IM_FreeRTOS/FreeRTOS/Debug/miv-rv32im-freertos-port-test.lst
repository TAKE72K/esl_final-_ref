
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00002ed0 memsz 0x0003c020 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00002dd0  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80002dd0  80002dd0  00003dd0  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80002df0  80002df0  00003df0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80002ed0  80002ed0  00003ed0  2**4  ALLOC
  4 .bss           000190e0  80002f40  80002f40  00003ed0  2**4  ALLOC
  5 .heap          00010000  8001c020  8001c020  00003ed0  2**4  ALLOC
  6 .stack         00010000  8002c020  8002c020  00003ed0  2**4  ALLOC
  7 .debug_line    00005d91  00000000  00000000  00003ed0  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000879f  00000000  00000000  00009c61  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  000018fe  00000000  00000000  00012400  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000678  00000000  00000000  00013d00  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00011b26  00000000  00000000  00014378  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000588  00000000  00000000  00025e9e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   0000471d  00000000  00000000  00026426  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000043  00000000  00000000  0002ab43  2**0  CONTENTS, READONLY
 15 .debug_frame   000016d0  00000000  00000000  0002ab88  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80002dd0 l    d  .sdata	00000000 .sdata
80002df0 l    d  .data	00000000 .data
80002ed0 l    d  .sbss	00000000 .sbss
80002f40 l    d  .bss	00000000 .bss
8001c020 l    d  .heap	00000000 .heap
8002c020 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	0000005e copy_section
800001c4 l     F .text	0000004e zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
800002d0 l     F .text	000000b6 PLIC_DisableIRQ
8000038c l     F .text	00000042 PLIC_ClaimIRQ
800003d4 l     F .text	0000004a PLIC_CompleteIRQ
80002ed0 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80002ed8 l     O .sbss	00000008 g_stdio_uart
80002ee0 l     O .sbss	00000004 g_stdio_uart_init_done
80000c88 l     F .text	0000002e stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80002f40 l     O .bss	00019000 ucHeap
80002ee4 l     O .sbss	00000008 xStart
80002eec l     O .sbss	00000008 xEnd
80002dd0 l     O .sdata	00000004 xFreeBytesRemaining
80002ef4 l     O .sbss	00000004 xHeapHasBeenInitialised.2592
800013bc l     F .text	0000007a prvHeapInit
00000000 l    df *ABS*	00000000 port.c
8000143c l     F .text	0000004a raise_soft_interrupt
80002dd4 l     O .sdata	00000004 uxCriticalNesting
80002dd8 l     O .sdata	00000004 mtime
80002ddc l     O .sdata	00000004 mtimecmp
80001508 l     F .text	000000ca prvSetNextTimerInterrupt
800016a8 l     F .text	0000002a prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001bf40 l     O .bss	00000064 pxReadyTasksLists
8001bfa4 l     O .bss	00000014 xDelayedTaskList1
8001bfb8 l     O .bss	00000014 xDelayedTaskList2
80002f00 l     O .sbss	00000004 pxDelayedTaskList
80002f04 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001bfcc l     O .bss	00000014 xPendingReadyList
8001bfe0 l     O .bss	00000014 xTasksWaitingTermination
80002f08 l     O .sbss	00000004 uxTasksDeleted
8001bff4 l     O .bss	00000014 xSuspendedTaskList
80002f0c l     O .sbss	00000004 uxCurrentNumberOfTasks
80002f10 l     O .sbss	00000004 xTickCount
80002f14 l     O .sbss	00000004 uxTopReadyPriority
80002f18 l     O .sbss	00000004 xSchedulerRunning
80002f1c l     O .sbss	00000004 uxPendedTicks
80002f20 l     O .sbss	00000004 xYieldPending
80002f24 l     O .sbss	00000004 xNumOfOverflows
80002f28 l     O .sbss	00000004 uxTaskNumber
80002f2c l     O .sbss	00000004 xNextTaskUnblockTime
80002f30 l     O .sbss	00000004 uxSchedulerSuspended
8000288c l     F .text	000000be prvAllocateTCBAndStack
8000255c l     F .text	00000136 prvInitialiseTCBVariables
80002698 l     F .text	000000be prvInitialiseTaskLists
80002994 l     F .text	0000005e prvResetNextTaskUnblockTime
80002800 l     F .text	00000086 prvAddCurrentTaskToDelayedList
80002524 l     F .text	00000032 prvIdleTask
8000275c l     F .text	0000009e prvCheckTasksWaitingTermination
80002950 l     F .text	0000003e prvDeleteTCB
00000000 l    df *ABS*	00000000 main.c
800029f8 l     F .text	000000ce PLIC_init
80002bd0 l     F .text	00000032 vUartTestTask1
80002c08 l     F .text	00000032 vUartTestTask2
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80002e70 l     O .data	00000060 impure_data
800014c4 g     F .text	0000003e vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80000800  w    F .text	0000001e External_11_IRQHandler
800035d0 g       .sdata	00000000 __global_pointer$
80002df0 g       *ABS*	00000000 __data_load
80001770 g     F .text	000000d2 SysTick_Handler
80000728  w    F .text	0000001e External_5_IRQHandler
80000e70 g       .text	00000000 HW_get_8bit_reg_field
80002efc g     O .sbss	00000004 pxCurrentTCB
80002ed0 g       .sbss	00000000 __sbss_start
8001c008 g     O .bss	00000004 errno
80000da8 g       .text	00000000 HW_set_32bit_reg
80000944  w    F .text	0000001e External_20_IRQHandler
80001848 g     F .text	00000042 xPortStartScheduler
80000424 g     F .text	00000022 __enable_irq
80001d78 g     F .text	0000021a xTaskGenericCreate
80002dd0 g       .sdata	00000000 __sdata_start
800012ec g     F .text	000000ca vPortFree
8001c00c g     O .bss	00000008 g_uart
80000e48 g       .text	00000000 HW_set_8bit_reg_field
80000a1c  w    F .text	0000001e External_26_IRQHandler
800005a4 g     F .text	000000ca handle_trap
80001a38 g     F .text	00000086 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
800007dc  w    F .text	0000001e External_10_IRQHandler
80001a0c g     F .text	00000026 vListInitialiseItem
80000aac  w    F .text	0000001e External_30_IRQHandler
800008d8  w    F .text	0000001e External_17_IRQHandler
8002c020 g       .heap	00000000 _heap_end
80000c34 g     F .text	0000004e _isatty
8001c020 g       .bss	00000000 __bss_end
80001108 g     F .text	000001de pvPortMalloc
80000218 g     F .text	00000092 _init
800019a4 g     F .text	00000062 vListInitialise
80000e38 g       .text	00000000 HW_set_8bit_reg
80000e40 g       .text	00000000 HW_get_8bit_reg
80002f40 g       .sbss	00000000 __sbss_end
80000db8 g       .text	00000000 HW_set_32bit_reg_field
80002c40 g     F .text	0000001a write
80002b98 g     F .text	00000012 vApplicationMallocFailedHook
800009f8  w    F .text	0000001e External_25_IRQHandler
8003c020 g       .stack	00000000 __stack_top
80000a88  w    F .text	0000001e External_29_IRQHandler
80001054 g     F .text	000000ae UART_polled_tx_string
80000af4 g     F .text	000000e6 write_hex
80000848  w    F .text	0000001e External_13_IRQHandler
800006bc  w    F .text	0000001e External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000824  w    F .text	0000001e External_12_IRQHandler
80000f9c g     F .text	000000b2 UART_send
80000000 g       .text	00000000 _start
800020b4 g     F .text	00000026 vTaskSuspendAll
8000044c g     F .text	000000aa handle_m_timer_interrupt
80001b9c g     F .text	00000096 uxListRemove
80002dd0 g       *ABS*	00000000 __sdata_load
80002ed0 g       .data	00000000 __data_end
80002434 g     F .text	000000ea vTaskSwitchContext
800008fc  w    F .text	0000001e External_18_IRQHandler
80000de0 g       .text	00000000 HW_get_32bit_reg_field
8000098c  w    F .text	0000001e External_22_IRQHandler
80000890  w    F .text	0000001e External_15_IRQHandler
80001978 g     F .text	00000026 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80002f40 g       .bss	00000000 __bss_start
800008b4  w    F .text	0000001e External_16_IRQHandler
80001c38 g     F .text	000000e6 memset
80002acc g     F .text	000000c6 main
80001ac4 g     F .text	000000d2 vListInsert
80000a64  w    F .text	0000001e External_28_IRQHandler
80000df8 g       .text	00000000 HW_get_16bit_reg
80002df0 g       .sdata	00000000 __sdata_end
8002c020 g       .heap	00000000 __heap_end
8000086c  w    F .text	0000001e External_14_IRQHandler
800002b0 g     F .text	0000001a _fini
800020e0 g     F .text	0000015e xTaskResumeAll
80002020 g     F .text	0000008e vTaskStartScheduler
80002df0 g     O .data	00000080 ext_irq_handler_table
80002c60 g     F .text	00000052 _write_r
80000e00 g       .text	00000000 HW_set_16bit_reg_field
80002de0 g     O .sdata	00000004 _impure_ptr
8002c020 g       .stack	00000000 __stack_bottom
80001890 g     F .text	000000e2 Software_IRQHandler
80000a40  w    F .text	0000001e External_27_IRQHandler
80000794  w    F .text	0000001e External_8_IRQHandler
800007b8  w    F .text	0000001e External_9_IRQHandler
8001c020 g       .heap	00000000 __heap_start
80000674  w    F .text	0000001e Invalid_IRQHandler
800006e0  w    F .text	0000001e External_3_IRQHandler
80002244 g     F .text	000001ea xTaskIncrementTick
80002ef8 g     O .sbss	00000004 g_startscheduler
80000920  w    F .text	0000001e External_19_IRQHandler
80000cbc g     F .text	000000e6 _write
8001c020 g       .bss	00000000 _end
800015d8 g     F .text	000000ca vPortSetupTimer
80001f98 g     F .text	00000082 vTaskDelay
80000e80 g     F .text	00000116 UART_init
80000db0 g       .text	00000000 HW_get_32bit_reg
80000be0 g     F .text	0000004e _exit
80000df0 g       .text	00000000 HW_set_16bit_reg
80001d24 g     F .text	0000004e strlen
800016d8 g     F .text	00000092 pxPortInitialiseStack
80000698  w    F .text	0000001e External_1_IRQHandler
8000074c  w    F .text	0000001e External_6_IRQHandler
80000ad0  w    F .text	0000001e External_31_IRQHandler
8000148c g     F .text	00000032 vPortEnterCritical
80002df0 g       .data	00000000 __data_start
80000968  w    F .text	0000001e External_21_IRQHandler
80000570 g     F .text	0000002e handle_m_soft_interrupt
800004fc g     F .text	0000006e handle_m_ext_interrupt
80000e28 g       .text	00000000 HW_get_16bit_reg_field
800009b0  w    F .text	0000001e External_23_IRQHandler
800009d4  w    F .text	0000001e External_24_IRQHandler
80000704  w    F .text	0000001e External_4_IRQHandler
80000770  w    F .text	0000001e External_7_IRQHandler
80002bb0 g     F .text	0000001a vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	02c0006f          	j	80000034 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02828293          	addi	t0,t0,40 # 80000034 <trap_entry>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00003197          	auipc	gp,0x3
80000024:	5b018193          	addi	gp,gp,1456 # 800035d0 <__global_pointer$>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000028:	0003c117          	auipc	sp,0x3c
8000002c:	ff810113          	addi	sp,sp,-8 # 8003c020 <__stack_top>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
80000030:	1e80006f          	j	80000218 <_init>

80000034 <trap_entry>:
trap_entry():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000034:	f8010113          	addi	sp,sp,-128
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000038:	00112023          	sw	ra,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
8000003c:	00212223          	sw	sp,4(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
80000040:	00312423          	sw	gp,8(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000044:	00412623          	sw	tp,12(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000048:	00512823          	sw	t0,16(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
8000004c:	00612a23          	sw	t1,20(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
80000050:	00712c23          	sw	t2,24(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000054:	00812e23          	sw	s0,28(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000058:	02912023          	sw	s1,32(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
8000005c:	02a12223          	sw	a0,36(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
80000060:	02b12423          	sw	a1,40(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000064:	02c12623          	sw	a2,44(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000068:	02d12823          	sw	a3,48(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
8000006c:	02e12a23          	sw	a4,52(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
80000070:	02f12c23          	sw	a5,56(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000074:	03012e23          	sw	a6,60(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000078:	05112023          	sw	a7,64(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
8000007c:	05212223          	sw	s2,68(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
80000080:	05312423          	sw	s3,72(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000084:	05412623          	sw	s4,76(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000088:	05512823          	sw	s5,80(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
8000008c:	05612a23          	sw	s6,84(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
80000090:	05712c23          	sw	s7,88(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000094:	05812e23          	sw	s8,92(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000098:	07912023          	sw	s9,96(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
8000009c:	07a12223          	sw	s10,100(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
800000a0:	07b12423          	sw	s11,104(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a4:	07c12623          	sw	t3,108(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a8:	07d12823          	sw	t4,112(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000ac:	07e12a23          	sw	t5,116(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000b0:	07f12c23          	sw	t6,120(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b4:	341022f3          	csrr	t0,mepc
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b8:	06512e23          	sw	t0,124(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000bc:	34202573          	csrr	a0,mcause
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000c0:	341025f3          	csrr	a1,mepc
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c4:	00010613          	mv	a2,sp
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c8:	4dc000ef          	jal	ra,800005a4 <handle_trap>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000cc:	34151073          	csrw	mepc,a0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d0:	000022b7          	lui	t0,0x2
800000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d8:	3002a073          	csrs	mstatus,t0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000dc:	00012083          	lw	ra,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000e0:	00412103          	lw	sp,4(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e4:	00812183          	lw	gp,8(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e8:	00c12203          	lw	tp,12(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000ec:	01012283          	lw	t0,16(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000f0:	01412303          	lw	t1,20(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f4:	01812383          	lw	t2,24(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f8:	01c12403          	lw	s0,28(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000fc:	02012483          	lw	s1,32(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
80000100:	02412503          	lw	a0,36(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000104:	02812583          	lw	a1,40(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000108:	02c12603          	lw	a2,44(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
8000010c:	03012683          	lw	a3,48(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
80000110:	03412703          	lw	a4,52(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000114:	03812783          	lw	a5,56(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000118:	03c12803          	lw	a6,60(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
8000011c:	04012883          	lw	a7,64(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
80000120:	04412903          	lw	s2,68(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000124:	04812983          	lw	s3,72(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000128:	04c12a03          	lw	s4,76(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
8000012c:	05012a83          	lw	s5,80(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
80000130:	05412b03          	lw	s6,84(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000134:	05812b83          	lw	s7,88(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000138:	05c12c03          	lw	s8,92(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
8000013c:	06012c83          	lw	s9,96(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
80000140:	06412d03          	lw	s10,100(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000144:	06812d83          	lw	s11,104(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000148:	06c12e03          	lw	t3,108(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
8000014c:	07012e83          	lw	t4,112(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
80000150:	07412f03          	lw	t5,116(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000154:	07812f83          	lw	t6,120(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000158:	08010113          	addi	sp,sp,128
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
8000015c:	30200073          	mret

80000160 <copy_section>:
copy_section():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
80000160:	fe010113          	addi	sp,sp,-32
80000164:	00812e23          	sw	s0,28(sp)
80000168:	02010413          	addi	s0,sp,32
8000016c:	fea42623          	sw	a0,-20(s0)
80000170:	feb42423          	sw	a1,-24(s0)
80000174:	fec42223          	sw	a2,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
80000178:	02c0006f          	j	800001a4 <copy_section+0x44>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:40
    {
        *p_vma = *p_load;
8000017c:	fec42783          	lw	a5,-20(s0)
80000180:	0007a703          	lw	a4,0(a5)
80000184:	fe842783          	lw	a5,-24(s0)
80000188:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:41
        ++p_load;
8000018c:	fec42783          	lw	a5,-20(s0)
80000190:	00478793          	addi	a5,a5,4
80000194:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:42
        ++p_vma;
80000198:	fe842783          	lw	a5,-24(s0)
8000019c:	00478793          	addi	a5,a5,4
800001a0:	fef42423          	sw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
800001a4:	fe842703          	lw	a4,-24(s0)
800001a8:	fe442783          	lw	a5,-28(s0)
800001ac:	fce7f8e3          	bleu	a4,a5,8000017c <copy_section+0x1c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:44
    }
}
800001b0:	00000013          	nop
800001b4:	01c12403          	lw	s0,28(sp)
800001b8:	02010113          	addi	sp,sp,32
800001bc:	00008067          	ret
800001c0:	0000                	unimp
	...

800001c4 <zero_section>:
zero_section():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
800001c4:	fd010113          	addi	sp,sp,-48
800001c8:	02812623          	sw	s0,44(sp)
800001cc:	03010413          	addi	s0,sp,48
800001d0:	fca42e23          	sw	a0,-36(s0)
800001d4:	fcb42c23          	sw	a1,-40(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
800001d8:	fdc42783          	lw	a5,-36(s0)
800001dc:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
800001e0:	0180006f          	j	800001f8 <zero_section+0x34>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001e4:	fec42783          	lw	a5,-20(s0)
800001e8:	0007a023          	sw	zero,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	00478793          	addi	a5,a5,4
800001f4:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001f8:	fec42703          	lw	a4,-20(s0)
800001fc:	fd842783          	lw	a5,-40(s0)
80000200:	fee7f2e3          	bleu	a4,a5,800001e4 <zero_section+0x20>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
80000204:	00000013          	nop
80000208:	02c12403          	lw	s0,44(sp)
8000020c:	03010113          	addi	sp,sp,48
80000210:	00008067          	ret
80000214:	0000                	unimp
	...

80000218 <_init>:
_init():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
80000218:	fe010113          	addi	sp,sp,-32
8000021c:	00112e23          	sw	ra,28(sp)
80000220:	00812c23          	sw	s0,24(sp)
80000224:	02010413          	addi	s0,sp,32
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
80000228:	800037b7          	lui	a5,0x80003
8000022c:	cc078793          	addi	a5,a5,-832 # 80002cc0 <__stack_top+0xfffc6ca0>
80000230:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
80000234:	fec42783          	lw	a5,-20(s0)
80000238:	fef42023          	sw	a5,-32(s0)
8000023c:	fe042223          	sw	zero,-28(s0)
80000240:	fe042423          	sw	zero,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
80000244:	82018613          	addi	a2,gp,-2016 # 80002df0 <__data_load>
80000248:	800037b7          	lui	a5,0x80003
8000024c:	dd078593          	addi	a1,a5,-560 # 80002dd0 <__stack_top+0xfffc6db0>
80000250:	800037b7          	lui	a5,0x80003
80000254:	dd078513          	addi	a0,a5,-560 # 80002dd0 <__stack_top+0xfffc6db0>
80000258:	f09ff0ef          	jal	ra,80000160 <copy_section>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
8000025c:	90018613          	addi	a2,gp,-1792 # 80002ed0 <__data_end>
80000260:	82018593          	addi	a1,gp,-2016 # 80002df0 <__data_load>
80000264:	82018513          	addi	a0,gp,-2016 # 80002df0 <__data_load>
80000268:	ef9ff0ef          	jal	ra,80000160 <copy_section>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
8000026c:	97018593          	addi	a1,gp,-1680 # 80002f40 <__sbss_end>
80000270:	90018513          	addi	a0,gp,-1792 # 80002ed0 <__data_end>
80000274:	f51ff0ef          	jal	ra,800001c4 <zero_section>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
80000278:	8001c7b7          	lui	a5,0x8001c
8000027c:	02078593          	addi	a1,a5,32 # 8001c020 <__stack_top+0xfffe0000>
80000280:	97018513          	addi	a0,gp,-1680 # 80002f40 <__sbss_end>
80000284:	f41ff0ef          	jal	ra,800001c4 <zero_section>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:68
    
    main(1, argv);
80000288:	fe040793          	addi	a5,s0,-32
8000028c:	00078593          	mv	a1,a5
80000290:	00100513          	li	a0,1
80000294:	039020ef          	jal	ra,80002acc <main>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:69
}
80000298:	00000013          	nop
8000029c:	01c12083          	lw	ra,28(sp)
800002a0:	01812403          	lw	s0,24(sp)
800002a4:	02010113          	addi	sp,sp,32
800002a8:	00008067          	ret
800002ac:	0000                	unimp
	...

800002b0 <_fini>:
_fini():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
800002b0:	ff010113          	addi	sp,sp,-16
800002b4:	00812623          	sw	s0,12(sp)
800002b8:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/init.c:75
}
800002bc:	00000013          	nop
800002c0:	00c12403          	lw	s0,12(sp)
800002c4:	01010113          	addi	sp,sp,16
800002c8:	00008067          	ret
800002cc:	0000                	unimp
	...

800002d0 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:114

        ret_val = SUCCESS;
    }
    
    return ret_val;
}
800002d0:	fd010113          	addi	sp,sp,-48
800002d4:	02812623          	sw	s0,44(sp)
800002d8:	03010413          	addi	s0,sp,48
800002dc:	fca42e23          	sw	a0,-36(s0)
800002e0:	f14027f3          	csrr	a5,mhartid
800002e4:	fef42623          	sw	a5,-20(s0)
800002e8:	fec42783          	lw	a5,-20(s0)
800002ec:	fef42423          	sw	a5,-24(s0)
800002f0:	40000737          	lui	a4,0x40000
800002f4:	fdc42783          	lw	a5,-36(s0)
800002f8:	0057d793          	srli	a5,a5,0x5
800002fc:	fe842683          	lw	a3,-24(s0)
80000300:	00569693          	slli	a3,a3,0x5
80000304:	00f686b3          	add	a3,a3,a5
80000308:	000017b7          	lui	a5,0x1
8000030c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000310:	00f687b3          	add	a5,a3,a5
80000314:	00279793          	slli	a5,a5,0x2
80000318:	00f707b3          	add	a5,a4,a5
8000031c:	0007a783          	lw	a5,0(a5)
80000320:	fef42223          	sw	a5,-28(s0)
80000324:	fdc42783          	lw	a5,-36(s0)
80000328:	01f7f793          	andi	a5,a5,31
8000032c:	00100713          	li	a4,1
80000330:	00f717b3          	sll	a5,a4,a5
80000334:	fff7c793          	not	a5,a5
80000338:	fe442703          	lw	a4,-28(s0)
8000033c:	00f777b3          	and	a5,a4,a5
80000340:	fef42223          	sw	a5,-28(s0)
80000344:	40000737          	lui	a4,0x40000
80000348:	fdc42783          	lw	a5,-36(s0)
8000034c:	0057d793          	srli	a5,a5,0x5
80000350:	fe842683          	lw	a3,-24(s0)
80000354:	00569693          	slli	a3,a3,0x5
80000358:	00f686b3          	add	a3,a3,a5
8000035c:	000017b7          	lui	a5,0x1
80000360:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000364:	00f687b3          	add	a5,a3,a5
80000368:	00279793          	slli	a5,a5,0x2
8000036c:	00f707b3          	add	a5,a4,a5
80000370:	fe442703          	lw	a4,-28(s0)
80000374:	00e7a023          	sw	a4,0(a5)
80000378:	00000013          	nop
8000037c:	02c12403          	lw	s0,44(sp)
80000380:	03010113          	addi	sp,sp,48
80000384:	00008067          	ret
80000388:	0000                	unimp
	...

8000038c <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
8000038c:	fe010113          	addi	sp,sp,-32
80000390:	00812e23          	sw	s0,28(sp)
80000394:	02010413          	addi	s0,sp,32
80000398:	f14027f3          	csrr	a5,mhartid
8000039c:	fef42623          	sw	a5,-20(s0)
800003a0:	fec42783          	lw	a5,-20(s0)
800003a4:	fef42423          	sw	a5,-24(s0)
800003a8:	40000737          	lui	a4,0x40000
800003ac:	fe842783          	lw	a5,-24(s0)
800003b0:	20078793          	addi	a5,a5,512
800003b4:	00c79793          	slli	a5,a5,0xc
800003b8:	00f707b3          	add	a5,a4,a5
800003bc:	0047a783          	lw	a5,4(a5)
800003c0:	00078513          	mv	a0,a5
800003c4:	01c12403          	lw	s0,28(sp)
800003c8:	02010113          	addi	sp,sp,32
800003cc:	00008067          	ret
800003d0:	0000                	unimp
	...

800003d4 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
800003d4:	fd010113          	addi	sp,sp,-48
800003d8:	02812623          	sw	s0,44(sp)
800003dc:	03010413          	addi	s0,sp,48
800003e0:	fca42e23          	sw	a0,-36(s0)
800003e4:	f14027f3          	csrr	a5,mhartid
800003e8:	fef42623          	sw	a5,-20(s0)
800003ec:	fec42783          	lw	a5,-20(s0)
800003f0:	fef42423          	sw	a5,-24(s0)
800003f4:	40000737          	lui	a4,0x40000
800003f8:	fe842783          	lw	a5,-24(s0)
800003fc:	20078793          	addi	a5,a5,512
80000400:	00c79793          	slli	a5,a5,0xc
80000404:	00f707b3          	add	a5,a4,a5
80000408:	fdc42703          	lw	a4,-36(s0)
8000040c:	00e7a223          	sw	a4,4(a5)
80000410:	00000013          	nop
80000414:	02c12403          	lw	s0,44(sp)
80000418:	03010113          	addi	sp,sp,48
8000041c:	00008067          	ret
80000420:	0000                	unimp
	...

80000424 <__enable_irq>:
__enable_irq():
80000424:	fe010113          	addi	sp,sp,-32
80000428:	00812e23          	sw	s0,28(sp)
8000042c:	02010413          	addi	s0,sp,32
80000430:	300467f3          	csrrsi	a5,mstatus,8
80000434:	fef42623          	sw	a5,-20(s0)
80000438:	00000013          	nop
8000043c:	01c12403          	lw	s0,28(sp)
80000440:	02010113          	addi	sp,sp,32
80000444:	00008067          	ret
80000448:	0000                	unimp
	...

8000044c <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:120

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:121
    clear_csr(mie, MIP_MTIP);
8000045c:	08000793          	li	a5,128
80000460:	3047b7f3          	csrrc	a5,mie,a5
80000464:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:123

    SysTick_Handler();
80000468:	308010ef          	jal	ra,80001770 <SysTick_Handler>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:125

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
8000046c:	44000737          	lui	a4,0x44000
80000470:	0000c7b7          	lui	a5,0xc
80000474:	00f707b3          	add	a5,a4,a5
80000478:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
8000047c:	ff87a783          	lw	a5,-8(a5)
80000480:	90018713          	addi	a4,gp,-1792 # 80002ed0 <__data_end>
80000484:	00072583          	lw	a1,0(a4) # 44000000 <RAM_SIZE+0x43f80000>
80000488:	00472603          	lw	a2,4(a4)
8000048c:	44000537          	lui	a0,0x44000
80000490:	f1402773          	csrr	a4,mhartid
80000494:	fee42423          	sw	a4,-24(s0)
80000498:	fe842883          	lw	a7,-24(s0)
8000049c:	00b786b3          	add	a3,a5,a1
800004a0:	00068313          	mv	t1,a3
800004a4:	00f33333          	sltu	t1,t1,a5
800004a8:	00c80733          	add	a4,a6,a2
800004ac:	00e307b3          	add	a5,t1,a4
800004b0:	00078713          	mv	a4,a5
800004b4:	00068793          	mv	a5,a3
800004b8:	00070813          	mv	a6,a4
800004bc:	00001737          	lui	a4,0x1
800004c0:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
800004c4:	00e88733          	add	a4,a7,a4
800004c8:	00371713          	slli	a4,a4,0x3
800004cc:	00e50733          	add	a4,a0,a4
800004d0:	00f72023          	sw	a5,0(a4)
800004d4:	01072223          	sw	a6,4(a4)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:127

    set_csr(mie, MIP_MTIP);
800004d8:	08000793          	li	a5,128
800004dc:	3047a7f3          	csrrs	a5,mie,a5
800004e0:	fef42223          	sw	a5,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128
}
800004e4:	00000013          	nop
800004e8:	01c12083          	lw	ra,28(sp)
800004ec:	01812403          	lw	s0,24(sp)
800004f0:	02010113          	addi	sp,sp,32
800004f4:	00008067          	ret
800004f8:	0000                	unimp
	...

800004fc <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:173

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
800004fc:	fe010113          	addi	sp,sp,-32
80000500:	00112e23          	sw	ra,28(sp)
80000504:	00812c23          	sw	s0,24(sp)
80000508:	02010413          	addi	s0,sp,32
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:174
    uint32_t int_num  = PLIC_ClaimIRQ();
8000050c:	e81ff0ef          	jal	ra,8000038c <PLIC_ClaimIRQ>
80000510:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:175
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000514:	fe0405a3          	sb	zero,-21(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:177

    disable = ext_irq_handler_table[int_num]();
80000518:	800037b7          	lui	a5,0x80003
8000051c:	fec42703          	lw	a4,-20(s0)
80000520:	00271713          	slli	a4,a4,0x2
80000524:	df078793          	addi	a5,a5,-528 # 80002df0 <__stack_top+0xfffc6dd0>
80000528:	00f707b3          	add	a5,a4,a5
8000052c:	0007a783          	lw	a5,0(a5)
80000530:	000780e7          	jalr	a5
80000534:	00050793          	mv	a5,a0
80000538:	fef405a3          	sb	a5,-21(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:179

    PLIC_CompleteIRQ(int_num);
8000053c:	fec42503          	lw	a0,-20(s0)
80000540:	e95ff0ef          	jal	ra,800003d4 <PLIC_CompleteIRQ>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:181

    if(EXT_IRQ_DISABLE == disable)
80000544:	feb44703          	lbu	a4,-21(s0)
80000548:	00100793          	li	a5,1
8000054c:	00f71663          	bne	a4,a5,80000558 <handle_m_ext_interrupt+0x5c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
80000550:	fec42503          	lw	a0,-20(s0)
80000554:	d7dff0ef          	jal	ra,800002d0 <PLIC_DisableIRQ>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:185
    }
}
80000558:	00000013          	nop
8000055c:	01c12083          	lw	ra,28(sp)
80000560:	01812403          	lw	s0,24(sp)
80000564:	02010113          	addi	sp,sp,32
80000568:	00008067          	ret
8000056c:	0000                	unimp
	...

80000570 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

void handle_m_soft_interrupt()
{
80000570:	ff010113          	addi	sp,sp,-16
80000574:	00112623          	sw	ra,12(sp)
80000578:	00812423          	sw	s0,8(sp)
8000057c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:189
    Software_IRQHandler();
80000580:	310010ef          	jal	ra,80001890 <Software_IRQHandler>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
80000584:	440007b7          	lui	a5,0x44000
80000588:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:193
}
8000058c:	00000013          	nop
80000590:	00c12083          	lw	ra,12(sp)
80000594:	00812403          	lw	s0,8(sp)
80000598:	01010113          	addi	sp,sp,16
8000059c:	00008067          	ret
800005a0:	0000                	unimp
	...

800005a4 <handle_trap>:
handle_trap():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198
/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800005a4:	fe010113          	addi	sp,sp,-32
800005a8:	00112e23          	sw	ra,28(sp)
800005ac:	00812c23          	sw	s0,24(sp)
800005b0:	02010413          	addi	s0,sp,32
800005b4:	fea42623          	sw	a0,-20(s0)
800005b8:	feb42423          	sw	a1,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
800005bc:	fec42783          	lw	a5,-20(s0)
800005c0:	0207d263          	bgez	a5,800005e4 <handle_trap+0x40>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199 (discriminator 1)
800005c4:	fec42703          	lw	a4,-20(s0)
800005c8:	800007b7          	lui	a5,0x80000
800005cc:	fff7c793          	not	a5,a5
800005d0:	00f77733          	and	a4,a4,a5
800005d4:	00b00793          	li	a5,11
800005d8:	00f71663          	bne	a4,a5,800005e4 <handle_trap+0x40>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
800005dc:	f21ff0ef          	jal	ra,800004fc <handle_m_ext_interrupt>
800005e0:	0780006f          	j	80000658 <handle_trap+0xb4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
800005e4:	fec42783          	lw	a5,-20(s0)
800005e8:	0207d263          	bgez	a5,8000060c <handle_trap+0x68>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203 (discriminator 1)
800005ec:	fec42703          	lw	a4,-20(s0)
800005f0:	800007b7          	lui	a5,0x80000
800005f4:	fff7c793          	not	a5,a5
800005f8:	00f77733          	and	a4,a4,a5
800005fc:	00700793          	li	a5,7
80000600:	00f71663          	bne	a4,a5,8000060c <handle_trap+0x68>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
80000604:	e49ff0ef          	jal	ra,8000044c <handle_m_timer_interrupt>
80000608:	0500006f          	j	80000658 <handle_trap+0xb4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
8000060c:	fec42783          	lw	a5,-20(s0)
80000610:	0207d263          	bgez	a5,80000634 <handle_trap+0x90>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207 (discriminator 1)
80000614:	fec42703          	lw	a4,-20(s0)
80000618:	800007b7          	lui	a5,0x80000
8000061c:	fff7c793          	not	a5,a5
80000620:	00f77733          	and	a4,a4,a5
80000624:	00300793          	li	a5,3
80000628:	00f71663          	bne	a4,a5,80000634 <handle_trap+0x90>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
8000062c:	f45ff0ef          	jal	ra,80000570 <handle_m_soft_interrupt>
80000630:	0280006f          	j	80000658 <handle_trap+0xb4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
    }
    else
    {
        write(1, "trap\n", 5);
80000634:	00500613          	li	a2,5
80000638:	800037b7          	lui	a5,0x80003
8000063c:	cc878593          	addi	a1,a5,-824 # 80002cc8 <__stack_top+0xfffc6ca8>
80000640:	00100513          	li	a0,1
80000644:	5fc020ef          	jal	ra,80002c40 <write>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
        _exit(1 + mcause);
80000648:	fec42783          	lw	a5,-20(s0)
8000064c:	00178793          	addi	a5,a5,1
80000650:	00078513          	mv	a0,a5
80000654:	58c000ef          	jal	ra,80000be0 <_exit>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
    }
    return epc;
80000658:	fe842783          	lw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
}
8000065c:	00078513          	mv	a0,a5
80000660:	01c12083          	lw	ra,28(sp)
80000664:	01812403          	lw	s0,24(sp)
80000668:	02010113          	addi	sp,sp,32
8000066c:	00008067          	ret
80000670:	0000                	unimp
	...

80000674 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000674:	ff010113          	addi	sp,sp,-16
80000678:	00812623          	sw	s0,12(sp)
8000067c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000680:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000684:	00078513          	mv	a0,a5
80000688:	00c12403          	lw	s0,12(sp)
8000068c:	01010113          	addi	sp,sp,16
80000690:	00008067          	ret
80000694:	0000                	unimp
	...

80000698 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000698:	ff010113          	addi	sp,sp,-16
8000069c:	00812623          	sw	s0,12(sp)
800006a0:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
800006a4:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
800006a8:	00078513          	mv	a0,a5
800006ac:	00c12403          	lw	s0,12(sp)
800006b0:	01010113          	addi	sp,sp,16
800006b4:	00008067          	ret
800006b8:	0000                	unimp
	...

800006bc <External_2_IRQHandler>:
External_2_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:47

__attribute__((weak))  uint8_t External_2_IRQHandler(void)
{
800006bc:	ff010113          	addi	sp,sp,-16
800006c0:	00812623          	sw	s0,12(sp)
800006c4:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:48
    return(0);
800006c8:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:49
}
800006cc:	00078513          	mv	a0,a5
800006d0:	00c12403          	lw	s0,12(sp)
800006d4:	01010113          	addi	sp,sp,16
800006d8:	00008067          	ret
800006dc:	0000                	unimp
	...

800006e0 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
800006e0:	ff010113          	addi	sp,sp,-16
800006e4:	00812623          	sw	s0,12(sp)
800006e8:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
800006ec:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
800006f0:	00078513          	mv	a0,a5
800006f4:	00c12403          	lw	s0,12(sp)
800006f8:	01010113          	addi	sp,sp,16
800006fc:	00008067          	ret
80000700:	0000                	unimp
	...

80000704 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000704:	ff010113          	addi	sp,sp,-16
80000708:	00812623          	sw	s0,12(sp)
8000070c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000710:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000714:	00078513          	mv	a0,a5
80000718:	00c12403          	lw	s0,12(sp)
8000071c:	01010113          	addi	sp,sp,16
80000720:	00008067          	ret
80000724:	0000                	unimp
	...

80000728 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000728:	ff010113          	addi	sp,sp,-16
8000072c:	00812623          	sw	s0,12(sp)
80000730:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000734:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000738:	00078513          	mv	a0,a5
8000073c:	00c12403          	lw	s0,12(sp)
80000740:	01010113          	addi	sp,sp,16
80000744:	00008067          	ret
80000748:	0000                	unimp
	...

8000074c <External_6_IRQHandler>:
External_6_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
8000074c:	ff010113          	addi	sp,sp,-16
80000750:	00812623          	sw	s0,12(sp)
80000754:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
80000758:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
8000075c:	00078513          	mv	a0,a5
80000760:	00c12403          	lw	s0,12(sp)
80000764:	01010113          	addi	sp,sp,16
80000768:	00008067          	ret
8000076c:	0000                	unimp
	...

80000770 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000770:	ff010113          	addi	sp,sp,-16
80000774:	00812623          	sw	s0,12(sp)
80000778:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
8000077c:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
80000780:	00078513          	mv	a0,a5
80000784:	00c12403          	lw	s0,12(sp)
80000788:	01010113          	addi	sp,sp,16
8000078c:	00008067          	ret
80000790:	0000                	unimp
	...

80000794 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
80000794:	ff010113          	addi	sp,sp,-16
80000798:	00812623          	sw	s0,12(sp)
8000079c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800007a0:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800007a4:	00078513          	mv	a0,a5
800007a8:	00c12403          	lw	s0,12(sp)
800007ac:	01010113          	addi	sp,sp,16
800007b0:	00008067          	ret
800007b4:	0000                	unimp
	...

800007b8 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800007b8:	ff010113          	addi	sp,sp,-16
800007bc:	00812623          	sw	s0,12(sp)
800007c0:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800007c4:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
800007c8:	00078513          	mv	a0,a5
800007cc:	00c12403          	lw	s0,12(sp)
800007d0:	01010113          	addi	sp,sp,16
800007d4:	00008067          	ret
800007d8:	0000                	unimp
	...

800007dc <External_10_IRQHandler>:
External_10_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800007dc:	ff010113          	addi	sp,sp,-16
800007e0:	00812623          	sw	s0,12(sp)
800007e4:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800007e8:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
800007ec:	00078513          	mv	a0,a5
800007f0:	00c12403          	lw	s0,12(sp)
800007f4:	01010113          	addi	sp,sp,16
800007f8:	00008067          	ret
800007fc:	0000                	unimp
	...

80000800 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000800:	ff010113          	addi	sp,sp,-16
80000804:	00812623          	sw	s0,12(sp)
80000808:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
8000080c:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000810:	00078513          	mv	a0,a5
80000814:	00c12403          	lw	s0,12(sp)
80000818:	01010113          	addi	sp,sp,16
8000081c:	00008067          	ret
80000820:	0000                	unimp
	...

80000824 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000824:	ff010113          	addi	sp,sp,-16
80000828:	00812623          	sw	s0,12(sp)
8000082c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000830:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000834:	00078513          	mv	a0,a5
80000838:	00c12403          	lw	s0,12(sp)
8000083c:	01010113          	addi	sp,sp,16
80000840:	00008067          	ret
80000844:	0000                	unimp
	...

80000848 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000848:	ff010113          	addi	sp,sp,-16
8000084c:	00812623          	sw	s0,12(sp)
80000850:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000854:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000858:	00078513          	mv	a0,a5
8000085c:	00c12403          	lw	s0,12(sp)
80000860:	01010113          	addi	sp,sp,16
80000864:	00008067          	ret
80000868:	0000                	unimp
	...

8000086c <External_14_IRQHandler>:
External_14_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
8000086c:	ff010113          	addi	sp,sp,-16
80000870:	00812623          	sw	s0,12(sp)
80000874:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000878:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
8000087c:	00078513          	mv	a0,a5
80000880:	00c12403          	lw	s0,12(sp)
80000884:	01010113          	addi	sp,sp,16
80000888:	00008067          	ret
8000088c:	0000                	unimp
	...

80000890 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000890:	ff010113          	addi	sp,sp,-16
80000894:	00812623          	sw	s0,12(sp)
80000898:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
8000089c:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
800008a0:	00078513          	mv	a0,a5
800008a4:	00c12403          	lw	s0,12(sp)
800008a8:	01010113          	addi	sp,sp,16
800008ac:	00008067          	ret
800008b0:	0000                	unimp
	...

800008b4 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
800008b4:	ff010113          	addi	sp,sp,-16
800008b8:	00812623          	sw	s0,12(sp)
800008bc:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
800008c0:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
800008c4:	00078513          	mv	a0,a5
800008c8:	00c12403          	lw	s0,12(sp)
800008cc:	01010113          	addi	sp,sp,16
800008d0:	00008067          	ret
800008d4:	0000                	unimp
	...

800008d8 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
800008d8:	ff010113          	addi	sp,sp,-16
800008dc:	00812623          	sw	s0,12(sp)
800008e0:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
800008e4:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
800008e8:	00078513          	mv	a0,a5
800008ec:	00c12403          	lw	s0,12(sp)
800008f0:	01010113          	addi	sp,sp,16
800008f4:	00008067          	ret
800008f8:	0000                	unimp
	...

800008fc <External_18_IRQHandler>:
External_18_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
800008fc:	ff010113          	addi	sp,sp,-16
80000900:	00812623          	sw	s0,12(sp)
80000904:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000908:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
8000090c:	00078513          	mv	a0,a5
80000910:	00c12403          	lw	s0,12(sp)
80000914:	01010113          	addi	sp,sp,16
80000918:	00008067          	ret
8000091c:	0000                	unimp
	...

80000920 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000920:	ff010113          	addi	sp,sp,-16
80000924:	00812623          	sw	s0,12(sp)
80000928:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
8000092c:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000930:	00078513          	mv	a0,a5
80000934:	00c12403          	lw	s0,12(sp)
80000938:	01010113          	addi	sp,sp,16
8000093c:	00008067          	ret
80000940:	0000                	unimp
	...

80000944 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000944:	ff010113          	addi	sp,sp,-16
80000948:	00812623          	sw	s0,12(sp)
8000094c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000950:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000954:	00078513          	mv	a0,a5
80000958:	00c12403          	lw	s0,12(sp)
8000095c:	01010113          	addi	sp,sp,16
80000960:	00008067          	ret
80000964:	0000                	unimp
	...

80000968 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000968:	ff010113          	addi	sp,sp,-16
8000096c:	00812623          	sw	s0,12(sp)
80000970:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000974:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000978:	00078513          	mv	a0,a5
8000097c:	00c12403          	lw	s0,12(sp)
80000980:	01010113          	addi	sp,sp,16
80000984:	00008067          	ret
80000988:	0000                	unimp
	...

8000098c <External_22_IRQHandler>:
External_22_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
8000098c:	ff010113          	addi	sp,sp,-16
80000990:	00812623          	sw	s0,12(sp)
80000994:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000998:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
8000099c:	00078513          	mv	a0,a5
800009a0:	00c12403          	lw	s0,12(sp)
800009a4:	01010113          	addi	sp,sp,16
800009a8:	00008067          	ret
800009ac:	0000                	unimp
	...

800009b0 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
800009b0:	ff010113          	addi	sp,sp,-16
800009b4:	00812623          	sw	s0,12(sp)
800009b8:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
800009bc:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
800009c0:	00078513          	mv	a0,a5
800009c4:	00c12403          	lw	s0,12(sp)
800009c8:	01010113          	addi	sp,sp,16
800009cc:	00008067          	ret
800009d0:	0000                	unimp
	...

800009d4 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
800009e0:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret
800009f4:	0000                	unimp
	...

800009f8 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
800009f8:	ff010113          	addi	sp,sp,-16
800009fc:	00812623          	sw	s0,12(sp)
80000a00:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000a04:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000a08:	00078513          	mv	a0,a5
80000a0c:	00c12403          	lw	s0,12(sp)
80000a10:	01010113          	addi	sp,sp,16
80000a14:	00008067          	ret
80000a18:	0000                	unimp
	...

80000a1c <External_26_IRQHandler>:
External_26_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000a1c:	ff010113          	addi	sp,sp,-16
80000a20:	00812623          	sw	s0,12(sp)
80000a24:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000a28:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000a2c:	00078513          	mv	a0,a5
80000a30:	00c12403          	lw	s0,12(sp)
80000a34:	01010113          	addi	sp,sp,16
80000a38:	00008067          	ret
80000a3c:	0000                	unimp
	...

80000a40 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000a40:	ff010113          	addi	sp,sp,-16
80000a44:	00812623          	sw	s0,12(sp)
80000a48:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000a4c:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000a50:	00078513          	mv	a0,a5
80000a54:	00c12403          	lw	s0,12(sp)
80000a58:	01010113          	addi	sp,sp,16
80000a5c:	00008067          	ret
80000a60:	0000                	unimp
	...

80000a64 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000a64:	ff010113          	addi	sp,sp,-16
80000a68:	00812623          	sw	s0,12(sp)
80000a6c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000a70:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000a74:	00078513          	mv	a0,a5
80000a78:	00c12403          	lw	s0,12(sp)
80000a7c:	01010113          	addi	sp,sp,16
80000a80:	00008067          	ret
80000a84:	0000                	unimp
	...

80000a88 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000a88:	ff010113          	addi	sp,sp,-16
80000a8c:	00812623          	sw	s0,12(sp)
80000a90:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000a94:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000a98:	00078513          	mv	a0,a5
80000a9c:	00c12403          	lw	s0,12(sp)
80000aa0:	01010113          	addi	sp,sp,16
80000aa4:	00008067          	ret
80000aa8:	0000                	unimp
	...

80000aac <External_30_IRQHandler>:
External_30_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000aac:	ff010113          	addi	sp,sp,-16
80000ab0:	00812623          	sw	s0,12(sp)
80000ab4:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000ab8:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000abc:	00078513          	mv	a0,a5
80000ac0:	00c12403          	lw	s0,12(sp)
80000ac4:	01010113          	addi	sp,sp,16
80000ac8:	00008067          	ret
80000acc:	0000                	unimp
	...

80000ad0 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000ad0:	ff010113          	addi	sp,sp,-16
80000ad4:	00812623          	sw	s0,12(sp)
80000ad8:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000adc:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ae0:	00078513          	mv	a0,a5
80000ae4:	00c12403          	lw	s0,12(sp)
80000ae8:	01010113          	addi	sp,sp,16
80000aec:	00008067          	ret
80000af0:	0000                	unimp
	...

80000af4 <write_hex>:
write_hex():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:223
}

int _wait(int* status)
{
    return stub(ECHILD);
}
80000af4:	fd010113          	addi	sp,sp,-48
80000af8:	02112623          	sw	ra,44(sp)
80000afc:	02812423          	sw	s0,40(sp)
80000b00:	03010413          	addi	s0,sp,48
80000b04:	fca42e23          	sw	a0,-36(s0)
80000b08:	fcb42c23          	sw	a1,-40(s0)
80000b0c:	00200613          	li	a2,2
80000b10:	800037b7          	lui	a5,0x80003
80000b14:	cd078593          	addi	a1,a5,-816 # 80002cd0 <__stack_top+0xfffc6cb0>
80000b18:	fdc42503          	lw	a0,-36(s0)
80000b1c:	124020ef          	jal	ra,80002c40 <write>
80000b20:	00800793          	li	a5,8
80000b24:	fef407a3          	sb	a5,-17(s0)
80000b28:	0980006f          	j	80000bc0 <write_hex+0xcc>
80000b2c:	fef44783          	lbu	a5,-17(s0)
80000b30:	fff78793          	addi	a5,a5,-1
80000b34:	fef40723          	sb	a5,-18(s0)
80000b38:	fee44783          	lbu	a5,-18(s0)
80000b3c:	00279793          	slli	a5,a5,0x2
80000b40:	00f00713          	li	a4,15
80000b44:	00f717b3          	sll	a5,a4,a5
80000b48:	00078713          	mv	a4,a5
80000b4c:	fd842783          	lw	a5,-40(s0)
80000b50:	00f77733          	and	a4,a4,a5
80000b54:	fee44783          	lbu	a5,-18(s0)
80000b58:	00279793          	slli	a5,a5,0x2
80000b5c:	00f757b3          	srl	a5,a4,a5
80000b60:	fef406a3          	sb	a5,-19(s0)
80000b64:	fed44703          	lbu	a4,-19(s0)
80000b68:	00900793          	li	a5,9
80000b6c:	00e7ee63          	bltu	a5,a4,80000b88 <write_hex+0x94>
80000b70:	fed44783          	lbu	a5,-19(s0)
80000b74:	03078793          	addi	a5,a5,48
80000b78:	0ff7f793          	andi	a5,a5,255
80000b7c:	01879793          	slli	a5,a5,0x18
80000b80:	4187d793          	srai	a5,a5,0x18
80000b84:	0180006f          	j	80000b9c <write_hex+0xa8>
80000b88:	fed44783          	lbu	a5,-19(s0)
80000b8c:	03778793          	addi	a5,a5,55
80000b90:	0ff7f793          	andi	a5,a5,255
80000b94:	01879793          	slli	a5,a5,0x18
80000b98:	4187d793          	srai	a5,a5,0x18
80000b9c:	fef40623          	sb	a5,-20(s0)
80000ba0:	fec40793          	addi	a5,s0,-20
80000ba4:	00100613          	li	a2,1
80000ba8:	00078593          	mv	a1,a5
80000bac:	fdc42503          	lw	a0,-36(s0)
80000bb0:	090020ef          	jal	ra,80002c40 <write>
80000bb4:	fef44783          	lbu	a5,-17(s0)
80000bb8:	fff78793          	addi	a5,a5,-1
80000bbc:	fef407a3          	sb	a5,-17(s0)
80000bc0:	fef44783          	lbu	a5,-17(s0)
80000bc4:	f60794e3          	bnez	a5,80000b2c <write_hex+0x38>
80000bc8:	00000013          	nop
80000bcc:	02c12083          	lw	ra,44(sp)
80000bd0:	02812403          	lw	s0,40(sp)
80000bd4:	03010113          	addi	sp,sp,48
80000bd8:	00008067          	ret
80000bdc:	0000                	unimp
	...

80000be0 <_exit>:
_exit():
80000be0:	fd010113          	addi	sp,sp,-48
80000be4:	02112623          	sw	ra,44(sp)
80000be8:	02812423          	sw	s0,40(sp)
80000bec:	03010413          	addi	s0,sp,48
80000bf0:	fca42e23          	sw	a0,-36(s0)
80000bf4:	800037b7          	lui	a5,0x80003
80000bf8:	cd478793          	addi	a5,a5,-812 # 80002cd4 <__stack_top+0xfffc6cb4>
80000bfc:	fef42623          	sw	a5,-20(s0)
80000c00:	fec42503          	lw	a0,-20(s0)
80000c04:	120010ef          	jal	ra,80001d24 <strlen>
80000c08:	00050793          	mv	a5,a0
80000c0c:	00078613          	mv	a2,a5
80000c10:	fec42583          	lw	a1,-20(s0)
80000c14:	00200513          	li	a0,2
80000c18:	028020ef          	jal	ra,80002c40 <write>
80000c1c:	fdc42783          	lw	a5,-36(s0)
80000c20:	00078593          	mv	a1,a5
80000c24:	00200513          	li	a0,2
80000c28:	ecdff0ef          	jal	ra,80000af4 <write_hex>
80000c2c:	0000006f          	j	80000c2c <_exit+0x4c>
80000c30:	0000                	unimp
	...

80000c34 <_isatty>:
_isatty():
80000c34:	fe010113          	addi	sp,sp,-32
80000c38:	00812e23          	sw	s0,28(sp)
80000c3c:	02010413          	addi	s0,sp,32
80000c40:	fea42623          	sw	a0,-20(s0)
80000c44:	fec42703          	lw	a4,-20(s0)
80000c48:	00100793          	li	a5,1
80000c4c:	00f70863          	beq	a4,a5,80000c5c <_isatty+0x28>
80000c50:	fec42703          	lw	a4,-20(s0)
80000c54:	00200793          	li	a5,2
80000c58:	00f71663          	bne	a4,a5,80000c64 <_isatty+0x30>
80000c5c:	00100793          	li	a5,1
80000c60:	0140006f          	j	80000c74 <_isatty+0x40>
80000c64:	8001c7b7          	lui	a5,0x8001c
80000c68:	00900713          	li	a4,9
80000c6c:	00e7a423          	sw	a4,8(a5) # 8001c008 <__stack_top+0xfffdffe8>
80000c70:	00000793          	li	a5,0
80000c74:	00078513          	mv	a0,a5
80000c78:	01c12403          	lw	s0,28(sp)
80000c7c:	02010113          	addi	sp,sp,32
80000c80:	00008067          	ret
80000c84:	0000                	unimp
	...

80000c88 <stub>:
stub():
80000c88:	fe010113          	addi	sp,sp,-32
80000c8c:	00812e23          	sw	s0,28(sp)
80000c90:	02010413          	addi	s0,sp,32
80000c94:	fea42623          	sw	a0,-20(s0)
80000c98:	8001c7b7          	lui	a5,0x8001c
80000c9c:	fec42703          	lw	a4,-20(s0)
80000ca0:	00e7a423          	sw	a4,8(a5) # 8001c008 <__stack_top+0xfffdffe8>
80000ca4:	fff00793          	li	a5,-1
80000ca8:	00078513          	mv	a0,a5
80000cac:	01c12403          	lw	s0,28(sp)
80000cb0:	02010113          	addi	sp,sp,32
80000cb4:	00008067          	ret
80000cb8:	0000                	unimp
	...

80000cbc <_write>:
_write():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:226

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000cbc:	fd010113          	addi	sp,sp,-48
80000cc0:	02112623          	sw	ra,44(sp)
80000cc4:	02812423          	sw	s0,40(sp)
80000cc8:	03010413          	addi	s0,sp,48
80000ccc:	fca42e23          	sw	a0,-36(s0)
80000cd0:	fcb42c23          	sw	a1,-40(s0)
80000cd4:	fcc42a23          	sw	a2,-44(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000cd8:	fd842783          	lw	a5,-40(s0)
80000cdc:	fef42423          	sw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ce0:	fdc42503          	lw	a0,-36(s0)
80000ce4:	f51ff0ef          	jal	ra,80000c34 <_isatty>
80000ce8:	00050793          	mv	a5,a0
80000cec:	08078c63          	beqz	a5,80000d84 <_write+0xc8>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000cf0:	9101a783          	lw	a5,-1776(gp) # 80002ee0 <g_stdio_uart_init_done>
80000cf4:	02079063          	bnez	a5,80000d14 <_write+0x58>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000cf8:	00100693          	li	a3,1
80000cfc:	02c00613          	li	a2,44
80000d00:	700015b7          	lui	a1,0x70001
80000d04:	90818513          	addi	a0,gp,-1784 # 80002ed8 <g_stdio_uart>
80000d08:	178000ef          	jal	ra,80000e80 <UART_init>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000d0c:	00100713          	li	a4,1
80000d10:	90e1a823          	sw	a4,-1776(gp) # 80002ee0 <g_stdio_uart_init_done>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000d14:	fe042623          	sw	zero,-20(s0)
80000d18:	0580006f          	j	80000d70 <_write+0xb4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000d1c:	fe842703          	lw	a4,-24(s0)
80000d20:	fec42783          	lw	a5,-20(s0)
80000d24:	00f707b3          	add	a5,a4,a5
80000d28:	00100613          	li	a2,1
80000d2c:	00078593          	mv	a1,a5
80000d30:	90818513          	addi	a0,gp,-1784 # 80002ed8 <g_stdio_uart>
80000d34:	268000ef          	jal	ra,80000f9c <UART_send>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000d38:	fe842703          	lw	a4,-24(s0)
80000d3c:	fec42783          	lw	a5,-20(s0)
80000d40:	00f707b3          	add	a5,a4,a5
80000d44:	0007c703          	lbu	a4,0(a5)
80000d48:	00a00793          	li	a5,10
80000d4c:	00f71c63          	bne	a4,a5,80000d64 <_write+0xa8>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000d50:	00100613          	li	a2,1
80000d54:	800037b7          	lui	a5,0x80003
80000d58:	cf478593          	addi	a1,a5,-780 # 80002cf4 <__stack_top+0xfffc6cd4>
80000d5c:	90818513          	addi	a0,gp,-1784 # 80002ed8 <g_stdio_uart>
80000d60:	23c000ef          	jal	ra,80000f9c <UART_send>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000d64:	fec42783          	lw	a5,-20(s0)
80000d68:	00178793          	addi	a5,a5,1
80000d6c:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000d70:	fec42703          	lw	a4,-20(s0)
80000d74:	fd442783          	lw	a5,-44(s0)
80000d78:	faf762e3          	bltu	a4,a5,80000d1c <_write+0x60>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000d7c:	fd442783          	lw	a5,-44(s0)
80000d80:	0100006f          	j	80000d90 <_write+0xd4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000d84:	00900513          	li	a0,9
80000d88:	f01ff0ef          	jal	ra,80000c88 <stub>
80000d8c:	00050793          	mv	a5,a0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000d90:	00078513          	mv	a0,a5
80000d94:	02c12083          	lw	ra,44(sp)
80000d98:	02812403          	lw	s0,40(sp)
80000d9c:	03010113          	addi	sp,sp,48
80000da0:	00008067          	ret
80000da4:	0000                	unimp
	...

80000da8 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000da8:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000dac:	00008067          	ret

80000db0 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000db0:	00052503          	lw	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000db4:	00008067          	ret

80000db8 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000db8:	00068e13          	mv	t3,a3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000dbc:	00be1e33          	sll	t3,t3,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000dc0:	00ce7e33          	and	t3,t3,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000dc4:	00052303          	lw	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000dc8:	00060393          	mv	t2,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000dcc:	fff3c393          	not	t2,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000dd0:	00737333          	and	t1,t1,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000dd4:	01c36333          	or	t1,t1,t3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000dd8:	00652023          	sw	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000ddc:	00008067          	ret

80000de0 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000de0:	00052503          	lw	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000de4:	00c57533          	and	a0,a0,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000de8:	00b55533          	srl	a0,a0,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000dec:	00008067          	ret

80000df0 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000df0:	00b51023          	sh	a1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000df4:	00008067          	ret

80000df8 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000df8:	00051503          	lh	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000dfc:	00008067          	ret

80000e00 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000e00:	00068e13          	mv	t3,a3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000e04:	00be1e33          	sll	t3,t3,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000e08:	00ce7e33          	and	t3,t3,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000e0c:	00051303          	lh	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000e10:	00060393          	mv	t2,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000e14:	fff3c393          	not	t2,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000e18:	00737333          	and	t1,t1,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000e1c:	01c36333          	or	t1,t1,t3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000e20:	00651023          	sh	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000e24:	00008067          	ret

80000e28 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000e28:	00051503          	lh	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000e2c:	00c57533          	and	a0,a0,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000e30:	00b55533          	srl	a0,a0,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000e34:	00008067          	ret

80000e38 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000e38:	00b50023          	sb	a1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000e3c:	00008067          	ret

80000e40 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000e40:	00050503          	lb	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000e44:	00008067          	ret

80000e48 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000e48:	00068e13          	mv	t3,a3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000e4c:	00be1e33          	sll	t3,t3,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000e50:	00ce7e33          	and	t3,t3,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000e54:	00050303          	lb	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000e58:	00060393          	mv	t2,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000e5c:	fff3c393          	not	t2,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000e60:	00737333          	and	t1,t1,t2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000e64:	01c36333          	or	t1,t1,t3
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000e68:	00650023          	sb	t1,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000e6c:	00008067          	ret

80000e70 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000e70:	00050503          	lb	a0,0(a0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000e74:	00c57533          	and	a0,a0,a2
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000e78:	00b55533          	srl	a0,a0,a1
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000e7c:	00008067          	ret

80000e80 <UART_init>:
UART_init():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:226
            this_uart->status |= new_status;
            rx_full = new_status & STATUS_RXFULL_MASK;
        }
    }
    return rx_idx;
}
80000e80:	fd010113          	addi	sp,sp,-48
80000e84:	02112623          	sw	ra,44(sp)
80000e88:	02812423          	sw	s0,40(sp)
80000e8c:	03010413          	addi	s0,sp,48
80000e90:	fca42e23          	sw	a0,-36(s0)
80000e94:	fcb42c23          	sw	a1,-40(s0)
80000e98:	00060793          	mv	a5,a2
80000e9c:	00068713          	mv	a4,a3
80000ea0:	fcf41b23          	sh	a5,-42(s0)
80000ea4:	00070793          	mv	a5,a4
80000ea8:	fcf40aa3          	sb	a5,-43(s0)
80000eac:	fdc42783          	lw	a5,-36(s0)
80000eb0:	0c078a63          	beqz	a5,80000f84 <UART_init+0x104>
80000eb4:	fd544703          	lbu	a4,-43(s0)
80000eb8:	00700793          	li	a5,7
80000ebc:	0ce7e463          	bltu	a5,a4,80000f84 <UART_init+0x104>
80000ec0:	fd645703          	lhu	a4,-42(s0)
80000ec4:	000027b7          	lui	a5,0x2
80000ec8:	0af77e63          	bleu	a5,a4,80000f84 <UART_init+0x104>
80000ecc:	fd842783          	lw	a5,-40(s0)
80000ed0:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80000ed4:	fd645783          	lhu	a5,-42(s0)
80000ed8:	0ff7f793          	andi	a5,a5,255
80000edc:	00078593          	mv	a1,a5
80000ee0:	00070513          	mv	a0,a4
80000ee4:	f55ff0ef          	jal	ra,80000e38 <HW_set_8bit_reg>
80000ee8:	fd842783          	lw	a5,-40(s0)
80000eec:	00c78693          	addi	a3,a5,12
80000ef0:	fd544703          	lbu	a4,-43(s0)
80000ef4:	fd645783          	lhu	a5,-42(s0)
80000ef8:	4057d793          	srai	a5,a5,0x5
80000efc:	7f87f793          	andi	a5,a5,2040
80000f00:	00f767b3          	or	a5,a4,a5
80000f04:	00078593          	mv	a1,a5
80000f08:	00068513          	mv	a0,a3
80000f0c:	f2dff0ef          	jal	ra,80000e38 <HW_set_8bit_reg>
80000f10:	fdc42783          	lw	a5,-36(s0)
80000f14:	fd842703          	lw	a4,-40(s0)
80000f18:	00e7a023          	sw	a4,0(a5)
80000f1c:	fdc42783          	lw	a5,-36(s0)
80000f20:	0007a783          	lw	a5,0(a5)
80000f24:	01078793          	addi	a5,a5,16
80000f28:	00078513          	mv	a0,a5
80000f2c:	f15ff0ef          	jal	ra,80000e40 <HW_get_8bit_reg>
80000f30:	00050793          	mv	a5,a0
80000f34:	0027f793          	andi	a5,a5,2
80000f38:	fef407a3          	sb	a5,-17(s0)
80000f3c:	0380006f          	j	80000f74 <UART_init+0xf4>
80000f40:	fdc42783          	lw	a5,-36(s0)
80000f44:	0007a783          	lw	a5,0(a5)
80000f48:	00478793          	addi	a5,a5,4
80000f4c:	00078513          	mv	a0,a5
80000f50:	ef1ff0ef          	jal	ra,80000e40 <HW_get_8bit_reg>
80000f54:	fdc42783          	lw	a5,-36(s0)
80000f58:	0007a783          	lw	a5,0(a5)
80000f5c:	01078793          	addi	a5,a5,16
80000f60:	00078513          	mv	a0,a5
80000f64:	eddff0ef          	jal	ra,80000e40 <HW_get_8bit_reg>
80000f68:	00050793          	mv	a5,a0
80000f6c:	0027f793          	andi	a5,a5,2
80000f70:	fef407a3          	sb	a5,-17(s0)
80000f74:	fef44783          	lbu	a5,-17(s0)
80000f78:	fc0794e3          	bnez	a5,80000f40 <UART_init+0xc0>
80000f7c:	fdc42783          	lw	a5,-36(s0)
80000f80:	00078223          	sb	zero,4(a5)
80000f84:	00000013          	nop
80000f88:	02c12083          	lw	ra,44(sp)
80000f8c:	02812403          	lw	s0,40(sp)
80000f90:	03010113          	addi	sp,sp,48
80000f94:	00008067          	ret
80000f98:	0000                	unimp
	...

80000f9c <UART_send>:
UART_send():
80000f9c:	fd010113          	addi	sp,sp,-48
80000fa0:	02112623          	sw	ra,44(sp)
80000fa4:	02812423          	sw	s0,40(sp)
80000fa8:	03010413          	addi	s0,sp,48
80000fac:	fca42e23          	sw	a0,-36(s0)
80000fb0:	fcb42c23          	sw	a1,-40(s0)
80000fb4:	fcc42a23          	sw	a2,-44(s0)
80000fb8:	fdc42783          	lw	a5,-36(s0)
80000fbc:	08078063          	beqz	a5,8000103c <UART_send+0xa0>
80000fc0:	fd842783          	lw	a5,-40(s0)
80000fc4:	06078c63          	beqz	a5,8000103c <UART_send+0xa0>
80000fc8:	fd442783          	lw	a5,-44(s0)
80000fcc:	06078863          	beqz	a5,8000103c <UART_send+0xa0>
80000fd0:	fe042623          	sw	zero,-20(s0)
80000fd4:	05c0006f          	j	80001030 <UART_send+0x94>
80000fd8:	fdc42783          	lw	a5,-36(s0)
80000fdc:	0007a783          	lw	a5,0(a5)
80000fe0:	01078793          	addi	a5,a5,16
80000fe4:	00078513          	mv	a0,a5
80000fe8:	e59ff0ef          	jal	ra,80000e40 <HW_get_8bit_reg>
80000fec:	00050793          	mv	a5,a0
80000ff0:	0017f793          	andi	a5,a5,1
80000ff4:	fef405a3          	sb	a5,-21(s0)
80000ff8:	feb44783          	lbu	a5,-21(s0)
80000ffc:	fc078ee3          	beqz	a5,80000fd8 <UART_send+0x3c>
80001000:	fdc42783          	lw	a5,-36(s0)
80001004:	0007a683          	lw	a3,0(a5)
80001008:	fd842703          	lw	a4,-40(s0)
8000100c:	fec42783          	lw	a5,-20(s0)
80001010:	00f707b3          	add	a5,a4,a5
80001014:	0007c783          	lbu	a5,0(a5)
80001018:	00078593          	mv	a1,a5
8000101c:	00068513          	mv	a0,a3
80001020:	e19ff0ef          	jal	ra,80000e38 <HW_set_8bit_reg>
80001024:	fec42783          	lw	a5,-20(s0)
80001028:	00178793          	addi	a5,a5,1
8000102c:	fef42623          	sw	a5,-20(s0)
80001030:	fec42703          	lw	a4,-20(s0)
80001034:	fd442783          	lw	a5,-44(s0)
80001038:	faf760e3          	bltu	a4,a5,80000fd8 <UART_send+0x3c>
8000103c:	00000013          	nop
80001040:	02c12083          	lw	ra,44(sp)
80001044:	02812403          	lw	s0,40(sp)
80001048:	03010113          	addi	sp,sp,48
8000104c:	00008067          	ret
80001050:	0000                	unimp
	...

80001054 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:238
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001054:	fd010113          	addi	sp,sp,-48
80001058:	02112623          	sw	ra,44(sp)
8000105c:	02812423          	sw	s0,40(sp)
80001060:	03010413          	addi	s0,sp,48
80001064:	fca42e23          	sw	a0,-36(s0)
80001068:	fcb42c23          	sw	a1,-40(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:245
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
8000106c:	fdc42783          	lw	a5,-36(s0)
80001070:	08078063          	beqz	a5,800010f0 <UART_polled_tx_string+0x9c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:245 (discriminator 1)
80001074:	fd842783          	lw	a5,-40(s0)
80001078:	06078c63          	beqz	a5,800010f0 <UART_polled_tx_string+0x9c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:247
    {
        char_idx = 0U;
8000107c:	fe042623          	sw	zero,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
80001080:	05c0006f          	j	800010dc <UART_polled_tx_string+0x88>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:252 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001084:	fdc42783          	lw	a5,-36(s0)
80001088:	0007a783          	lw	a5,0(a5)
8000108c:	01078793          	addi	a5,a5,16
80001090:	00078513          	mv	a0,a5
80001094:	dadff0ef          	jal	ra,80000e40 <HW_get_8bit_reg>
80001098:	00050793          	mv	a5,a0
8000109c:	0017f793          	andi	a5,a5,1
800010a0:	fef405a3          	sb	a5,-21(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:254 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800010a4:	feb44783          	lbu	a5,-21(s0)
800010a8:	fc078ee3          	beqz	a5,80001084 <UART_polled_tx_string+0x30>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:256
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800010ac:	fdc42783          	lw	a5,-36(s0)
800010b0:	0007a683          	lw	a3,0(a5)
800010b4:	fd842703          	lw	a4,-40(s0)
800010b8:	fec42783          	lw	a5,-20(s0)
800010bc:	00f707b3          	add	a5,a4,a5
800010c0:	0007c783          	lbu	a5,0(a5)
800010c4:	00078593          	mv	a1,a5
800010c8:	00068513          	mv	a0,a3
800010cc:	d6dff0ef          	jal	ra,80000e38 <HW_set_8bit_reg>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:258
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800010d0:	fec42783          	lw	a5,-20(s0)
800010d4:	00178793          	addi	a5,a5,1
800010d8:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
        while( 0U != p_sz_string[char_idx] )
800010dc:	fd842703          	lw	a4,-40(s0)
800010e0:	fec42783          	lw	a5,-20(s0)
800010e4:	00f707b3          	add	a5,a4,a5
800010e8:	0007c783          	lbu	a5,0(a5)
800010ec:	f8079ce3          	bnez	a5,80001084 <UART_polled_tx_string+0x30>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:261
        }
    }
}
800010f0:	00000013          	nop
800010f4:	02c12083          	lw	ra,44(sp)
800010f8:	02812403          	lw	s0,40(sp)
800010fc:	03010113          	addi	sp,sp,48
80001100:	00008067          	ret
80001104:	0000                	unimp
	...

80001108 <pvPortMalloc>:
pvPortMalloc():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:278
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
80001108:	fc010113          	addi	sp,sp,-64
8000110c:	02112e23          	sw	ra,60(sp)
80001110:	02812c23          	sw	s0,56(sp)
80001114:	04010413          	addi	s0,sp,64
80001118:	fca42623          	sw	a0,-52(s0)
8000111c:	fe042223          	sw	zero,-28(s0)
80001120:	795000ef          	jal	ra,800020b4 <vTaskSuspendAll>
80001124:	9241a783          	lw	a5,-1756(gp) # 80002ef4 <xHeapHasBeenInitialised.2592>
80001128:	00079863          	bnez	a5,80001138 <pvPortMalloc+0x30>
8000112c:	290000ef          	jal	ra,800013bc <prvHeapInit>
80001130:	00100713          	li	a4,1
80001134:	92e1a223          	sw	a4,-1756(gp) # 80002ef4 <xHeapHasBeenInitialised.2592>
80001138:	fcc42783          	lw	a5,-52(s0)
8000113c:	02078a63          	beqz	a5,80001170 <pvPortMalloc+0x68>
80001140:	00800793          	li	a5,8
80001144:	00078713          	mv	a4,a5
80001148:	fcc42783          	lw	a5,-52(s0)
8000114c:	00e787b3          	add	a5,a5,a4
80001150:	fcf42623          	sw	a5,-52(s0)
80001154:	fcc42783          	lw	a5,-52(s0)
80001158:	0037f793          	andi	a5,a5,3
8000115c:	00078a63          	beqz	a5,80001170 <pvPortMalloc+0x68>
80001160:	fcc42783          	lw	a5,-52(s0)
80001164:	ffc7f793          	andi	a5,a5,-4
80001168:	00478793          	addi	a5,a5,4
8000116c:	fcf42623          	sw	a5,-52(s0)
80001170:	fcc42783          	lw	a5,-52(s0)
80001174:	14078663          	beqz	a5,800012c0 <pvPortMalloc+0x1b8>
80001178:	fcc42703          	lw	a4,-52(s0)
8000117c:	000197b7          	lui	a5,0x19
80001180:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001184:	12e7ee63          	bltu	a5,a4,800012c0 <pvPortMalloc+0x1b8>
80001188:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
8000118c:	fef42423          	sw	a5,-24(s0)
80001190:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
80001194:	0007a783          	lw	a5,0(a5)
80001198:	fef42623          	sw	a5,-20(s0)
8000119c:	0180006f          	j	800011b4 <pvPortMalloc+0xac>
800011a0:	fec42783          	lw	a5,-20(s0)
800011a4:	fef42423          	sw	a5,-24(s0)
800011a8:	fec42783          	lw	a5,-20(s0)
800011ac:	0007a783          	lw	a5,0(a5)
800011b0:	fef42623          	sw	a5,-20(s0)
800011b4:	fec42783          	lw	a5,-20(s0)
800011b8:	0047a783          	lw	a5,4(a5)
800011bc:	fcc42703          	lw	a4,-52(s0)
800011c0:	00e7f863          	bleu	a4,a5,800011d0 <pvPortMalloc+0xc8>
800011c4:	fec42783          	lw	a5,-20(s0)
800011c8:	0007a783          	lw	a5,0(a5)
800011cc:	fc079ae3          	bnez	a5,800011a0 <pvPortMalloc+0x98>
800011d0:	fec42703          	lw	a4,-20(s0)
800011d4:	91c18793          	addi	a5,gp,-1764 # 80002eec <xEnd>
800011d8:	0ef70463          	beq	a4,a5,800012c0 <pvPortMalloc+0x1b8>
800011dc:	fe842783          	lw	a5,-24(s0)
800011e0:	0007a783          	lw	a5,0(a5)
800011e4:	00800713          	li	a4,8
800011e8:	00e787b3          	add	a5,a5,a4
800011ec:	fef42223          	sw	a5,-28(s0)
800011f0:	fec42783          	lw	a5,-20(s0)
800011f4:	0007a703          	lw	a4,0(a5)
800011f8:	fe842783          	lw	a5,-24(s0)
800011fc:	00e7a023          	sw	a4,0(a5)
80001200:	fec42783          	lw	a5,-20(s0)
80001204:	0047a703          	lw	a4,4(a5)
80001208:	fcc42783          	lw	a5,-52(s0)
8000120c:	40f707b3          	sub	a5,a4,a5
80001210:	00800713          	li	a4,8
80001214:	00171713          	slli	a4,a4,0x1
80001218:	08f77663          	bleu	a5,a4,800012a4 <pvPortMalloc+0x19c>
8000121c:	fec42703          	lw	a4,-20(s0)
80001220:	fcc42783          	lw	a5,-52(s0)
80001224:	00f707b3          	add	a5,a4,a5
80001228:	fcf42e23          	sw	a5,-36(s0)
8000122c:	fec42783          	lw	a5,-20(s0)
80001230:	0047a703          	lw	a4,4(a5)
80001234:	fcc42783          	lw	a5,-52(s0)
80001238:	40f70733          	sub	a4,a4,a5
8000123c:	fdc42783          	lw	a5,-36(s0)
80001240:	00e7a223          	sw	a4,4(a5)
80001244:	fec42783          	lw	a5,-20(s0)
80001248:	fcc42703          	lw	a4,-52(s0)
8000124c:	00e7a223          	sw	a4,4(a5)
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	0047a783          	lw	a5,4(a5)
80001258:	fcf42c23          	sw	a5,-40(s0)
8000125c:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
80001260:	fef42023          	sw	a5,-32(s0)
80001264:	0100006f          	j	80001274 <pvPortMalloc+0x16c>
80001268:	fe042783          	lw	a5,-32(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	fef42023          	sw	a5,-32(s0)
80001274:	fe042783          	lw	a5,-32(s0)
80001278:	0007a783          	lw	a5,0(a5)
8000127c:	0047a783          	lw	a5,4(a5)
80001280:	fd842703          	lw	a4,-40(s0)
80001284:	fee7e2e3          	bltu	a5,a4,80001268 <pvPortMalloc+0x160>
80001288:	fe042783          	lw	a5,-32(s0)
8000128c:	0007a703          	lw	a4,0(a5)
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	00e7a023          	sw	a4,0(a5)
80001298:	fe042783          	lw	a5,-32(s0)
8000129c:	fdc42703          	lw	a4,-36(s0)
800012a0:	00e7a023          	sw	a4,0(a5)
800012a4:	800037b7          	lui	a5,0x80003
800012a8:	dd07a703          	lw	a4,-560(a5) # 80002dd0 <__stack_top+0xfffc6db0>
800012ac:	fec42783          	lw	a5,-20(s0)
800012b0:	0047a783          	lw	a5,4(a5)
800012b4:	40f70733          	sub	a4,a4,a5
800012b8:	800037b7          	lui	a5,0x80003
800012bc:	dce7a823          	sw	a4,-560(a5) # 80002dd0 <__stack_top+0xfffc6db0>
800012c0:	621000ef          	jal	ra,800020e0 <xTaskResumeAll>
800012c4:	fe442783          	lw	a5,-28(s0)
800012c8:	00079463          	bnez	a5,800012d0 <pvPortMalloc+0x1c8>
800012cc:	0cd010ef          	jal	ra,80002b98 <vApplicationMallocFailedHook>
800012d0:	fe442783          	lw	a5,-28(s0)
800012d4:	00078513          	mv	a0,a5
800012d8:	03c12083          	lw	ra,60(sp)
800012dc:	03812403          	lw	s0,56(sp)
800012e0:	04010113          	addi	sp,sp,64
800012e4:	00008067          	ret
800012e8:	0000                	unimp
	...

800012ec <vPortFree>:
vPortFree():
800012ec:	fd010113          	addi	sp,sp,-48
800012f0:	02112623          	sw	ra,44(sp)
800012f4:	02812423          	sw	s0,40(sp)
800012f8:	03010413          	addi	s0,sp,48
800012fc:	fca42e23          	sw	a0,-36(s0)
80001300:	fdc42783          	lw	a5,-36(s0)
80001304:	fef42423          	sw	a5,-24(s0)
80001308:	fdc42783          	lw	a5,-36(s0)
8000130c:	08078c63          	beqz	a5,800013a4 <vPortFree+0xb8>
80001310:	00800793          	li	a5,8
80001314:	40f007b3          	neg	a5,a5
80001318:	fe842703          	lw	a4,-24(s0)
8000131c:	00f707b3          	add	a5,a4,a5
80001320:	fef42423          	sw	a5,-24(s0)
80001324:	fe842783          	lw	a5,-24(s0)
80001328:	fef42223          	sw	a5,-28(s0)
8000132c:	589000ef          	jal	ra,800020b4 <vTaskSuspendAll>
80001330:	fe442783          	lw	a5,-28(s0)
80001334:	0047a783          	lw	a5,4(a5)
80001338:	fef42023          	sw	a5,-32(s0)
8000133c:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
80001340:	fef42623          	sw	a5,-20(s0)
80001344:	0100006f          	j	80001354 <vPortFree+0x68>
80001348:	fec42783          	lw	a5,-20(s0)
8000134c:	0007a783          	lw	a5,0(a5)
80001350:	fef42623          	sw	a5,-20(s0)
80001354:	fec42783          	lw	a5,-20(s0)
80001358:	0007a783          	lw	a5,0(a5)
8000135c:	0047a783          	lw	a5,4(a5)
80001360:	fe042703          	lw	a4,-32(s0)
80001364:	fee7e2e3          	bltu	a5,a4,80001348 <vPortFree+0x5c>
80001368:	fec42783          	lw	a5,-20(s0)
8000136c:	0007a703          	lw	a4,0(a5)
80001370:	fe442783          	lw	a5,-28(s0)
80001374:	00e7a023          	sw	a4,0(a5)
80001378:	fec42783          	lw	a5,-20(s0)
8000137c:	fe442703          	lw	a4,-28(s0)
80001380:	00e7a023          	sw	a4,0(a5)
80001384:	fe442783          	lw	a5,-28(s0)
80001388:	0047a703          	lw	a4,4(a5)
8000138c:	800037b7          	lui	a5,0x80003
80001390:	dd07a783          	lw	a5,-560(a5) # 80002dd0 <__stack_top+0xfffc6db0>
80001394:	00f70733          	add	a4,a4,a5
80001398:	800037b7          	lui	a5,0x80003
8000139c:	dce7a823          	sw	a4,-560(a5) # 80002dd0 <__stack_top+0xfffc6db0>
800013a0:	541000ef          	jal	ra,800020e0 <xTaskResumeAll>
800013a4:	00000013          	nop
800013a8:	02c12083          	lw	ra,44(sp)
800013ac:	02812403          	lw	s0,40(sp)
800013b0:	03010113          	addi	sp,sp,48
800013b4:	00008067          	ret
800013b8:	0000                	unimp
	...

800013bc <prvHeapInit>:
prvHeapInit():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
800013bc:	fe010113          	addi	sp,sp,-32
800013c0:	00812e23          	sw	s0,28(sp)
800013c4:	02010413          	addi	s0,sp,32
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
800013c8:	800037b7          	lui	a5,0x80003
800013cc:	f4478793          	addi	a5,a5,-188 # 80002f44 <__stack_top+0xfffc6f24>
800013d0:	ffc7f793          	andi	a5,a5,-4
800013d4:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800013d8:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
800013dc:	fec42703          	lw	a4,-20(s0)
800013e0:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800013e4:	91418793          	addi	a5,gp,-1772 # 80002ee4 <xStart>
800013e8:	0007a223          	sw	zero,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800013ec:	91c18793          	addi	a5,gp,-1764 # 80002eec <xEnd>
800013f0:	00019737          	lui	a4,0x19
800013f4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800013f8:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800013fc:	91c18793          	addi	a5,gp,-1764 # 80002eec <xEnd>
80001400:	0007a023          	sw	zero,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80001404:	fec42783          	lw	a5,-20(s0)
80001408:	fef42423          	sw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
8000140c:	fe842783          	lw	a5,-24(s0)
80001410:	00019737          	lui	a4,0x19
80001414:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001418:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
8000141c:	fe842783          	lw	a5,-24(s0)
80001420:	91c18713          	addi	a4,gp,-1764 # 80002eec <xEnd>
80001424:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
80001428:	00000013          	nop
8000142c:	01c12403          	lw	s0,28(sp)
80001430:	02010113          	addi	sp,sp,32
80001434:	00008067          	ret
80001438:	0000                	unimp
	...

8000143c <raise_soft_interrupt>:
raise_soft_interrupt():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:214
{
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
	__asm volatile("csrc mie,%0"::"i"(7));
	return ret;
}
8000143c:	fe010113          	addi	sp,sp,-32
80001440:	00812e23          	sw	s0,28(sp)
80001444:	02010413          	addi	s0,sp,32
80001448:	f14027f3          	csrr	a5,mhartid
8000144c:	fef42623          	sw	a5,-20(s0)
80001450:	fec42783          	lw	a5,-20(s0)
80001454:	fef42423          	sw	a5,-24(s0)
80001458:	304467f3          	csrrsi	a5,mie,8
8000145c:	fef42223          	sw	a5,-28(s0)
80001460:	44000737          	lui	a4,0x44000
80001464:	fe842783          	lw	a5,-24(s0)
80001468:	00279793          	slli	a5,a5,0x2
8000146c:	00f707b3          	add	a5,a4,a5
80001470:	00100713          	li	a4,1
80001474:	00e7a023          	sw	a4,0(a5)
80001478:	00000013          	nop
8000147c:	01c12403          	lw	s0,28(sp)
80001480:	02010113          	addi	sp,sp,32
80001484:	00008067          	ret
80001488:	0000                	unimp
	...

8000148c <vPortEnterCritical>:
vPortEnterCritical():
8000148c:	ff010113          	addi	sp,sp,-16
80001490:	00812623          	sw	s0,12(sp)
80001494:	01010413          	addi	s0,sp,16
80001498:	30047073          	csrci	mstatus,8
8000149c:	800037b7          	lui	a5,0x80003
800014a0:	dd47a783          	lw	a5,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800014a4:	00178713          	addi	a4,a5,1
800014a8:	800037b7          	lui	a5,0x80003
800014ac:	dce7aa23          	sw	a4,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800014b0:	00000013          	nop
800014b4:	00c12403          	lw	s0,12(sp)
800014b8:	01010113          	addi	sp,sp,16
800014bc:	00008067          	ret
800014c0:	0000                	unimp
	...

800014c4 <vPortExitCritical>:
vPortExitCritical():
800014c4:	ff010113          	addi	sp,sp,-16
800014c8:	00812623          	sw	s0,12(sp)
800014cc:	01010413          	addi	s0,sp,16
800014d0:	800037b7          	lui	a5,0x80003
800014d4:	dd47a783          	lw	a5,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800014d8:	fff78713          	addi	a4,a5,-1
800014dc:	800037b7          	lui	a5,0x80003
800014e0:	dce7aa23          	sw	a4,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800014e4:	800037b7          	lui	a5,0x80003
800014e8:	dd47a783          	lw	a5,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800014ec:	00079463          	bnez	a5,800014f4 <vPortExitCritical+0x30>
800014f0:	30046073          	csrsi	mstatus,8
800014f4:	00000013          	nop
800014f8:	00c12403          	lw	s0,12(sp)
800014fc:	01010113          	addi	sp,sp,16
80001500:	00008067          	ret
80001504:	0000                	unimp
	...

80001508 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
80001508:	fe010113          	addi	sp,sp,-32
8000150c:	00812e23          	sw	s0,28(sp)
80001510:	02010413          	addi	s0,sp,32
80001514:	80003637          	lui	a2,0x80003
80001518:	dd862603          	lw	a2,-552(a2) # 80002dd8 <__stack_top+0xfffc6db8>
8000151c:	00062603          	lw	a2,0(a2)
80001520:	fec42423          	sw	a2,-24(s0)
80001524:	fe042623          	sw	zero,-20(s0)
80001528:	80003637          	lui	a2,0x80003
8000152c:	dd862603          	lw	a2,-552(a2) # 80002dd8 <__stack_top+0xfffc6db8>
80001530:	00462603          	lw	a2,4(a2)
80001534:	00060693          	mv	a3,a2
80001538:	00000713          	li	a4,0
8000153c:	00069813          	slli	a6,a3,0x0
80001540:	00000793          	li	a5,0
80001544:	fe842703          	lw	a4,-24(s0)
80001548:	00f76733          	or	a4,a4,a5
8000154c:	fee42423          	sw	a4,-24(s0)
80001550:	fec42703          	lw	a4,-20(s0)
80001554:	010767b3          	or	a5,a4,a6
80001558:	fef42623          	sw	a5,-20(s0)
8000155c:	fe842683          	lw	a3,-24(s0)
80001560:	fec42703          	lw	a4,-20(s0)
80001564:	000145b7          	lui	a1,0x14
80001568:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
8000156c:	00000613          	li	a2,0
80001570:	00b687b3          	add	a5,a3,a1
80001574:	00078513          	mv	a0,a5
80001578:	00d53533          	sltu	a0,a0,a3
8000157c:	00c70833          	add	a6,a4,a2
80001580:	01050733          	add	a4,a0,a6
80001584:	00070813          	mv	a6,a4
80001588:	fef42423          	sw	a5,-24(s0)
8000158c:	ff042623          	sw	a6,-20(s0)
80001590:	800037b7          	lui	a5,0x80003
80001594:	ddc7a783          	lw	a5,-548(a5) # 80002ddc <__stack_top+0xfffc6dbc>
80001598:	fe842703          	lw	a4,-24(s0)
8000159c:	00e7a023          	sw	a4,0(a5)
800015a0:	fec42783          	lw	a5,-20(s0)
800015a4:	0007d313          	srli	t1,a5,0x0
800015a8:	00000393          	li	t2,0
800015ac:	800037b7          	lui	a5,0x80003
800015b0:	ddc7a783          	lw	a5,-548(a5) # 80002ddc <__stack_top+0xfffc6dbc>
800015b4:	00030713          	mv	a4,t1
800015b8:	00e7a223          	sw	a4,4(a5)
800015bc:	08000793          	li	a5,128
800015c0:	3047a073          	csrs	mie,a5
800015c4:	00000013          	nop
800015c8:	01c12403          	lw	s0,28(sp)
800015cc:	02010113          	addi	sp,sp,32
800015d0:	00008067          	ret
800015d4:	0000                	unimp
	...

800015d8 <vPortSetupTimer>:
vPortSetupTimer():
800015d8:	fe010113          	addi	sp,sp,-32
800015dc:	00812e23          	sw	s0,28(sp)
800015e0:	02010413          	addi	s0,sp,32
800015e4:	80003637          	lui	a2,0x80003
800015e8:	dd862603          	lw	a2,-552(a2) # 80002dd8 <__stack_top+0xfffc6db8>
800015ec:	00062603          	lw	a2,0(a2)
800015f0:	fec42423          	sw	a2,-24(s0)
800015f4:	fe042623          	sw	zero,-20(s0)
800015f8:	80003637          	lui	a2,0x80003
800015fc:	dd862603          	lw	a2,-552(a2) # 80002dd8 <__stack_top+0xfffc6db8>
80001600:	00462603          	lw	a2,4(a2)
80001604:	00060693          	mv	a3,a2
80001608:	00000713          	li	a4,0
8000160c:	00069813          	slli	a6,a3,0x0
80001610:	00000793          	li	a5,0
80001614:	fe842703          	lw	a4,-24(s0)
80001618:	00f76733          	or	a4,a4,a5
8000161c:	fee42423          	sw	a4,-24(s0)
80001620:	fec42703          	lw	a4,-20(s0)
80001624:	010767b3          	or	a5,a4,a6
80001628:	fef42623          	sw	a5,-20(s0)
8000162c:	fe842683          	lw	a3,-24(s0)
80001630:	fec42703          	lw	a4,-20(s0)
80001634:	000145b7          	lui	a1,0x14
80001638:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
8000163c:	00000613          	li	a2,0
80001640:	00b687b3          	add	a5,a3,a1
80001644:	00078513          	mv	a0,a5
80001648:	00d53533          	sltu	a0,a0,a3
8000164c:	00c70833          	add	a6,a4,a2
80001650:	01050733          	add	a4,a0,a6
80001654:	00070813          	mv	a6,a4
80001658:	fef42423          	sw	a5,-24(s0)
8000165c:	ff042623          	sw	a6,-20(s0)
80001660:	800037b7          	lui	a5,0x80003
80001664:	ddc7a783          	lw	a5,-548(a5) # 80002ddc <__stack_top+0xfffc6dbc>
80001668:	fe842703          	lw	a4,-24(s0)
8000166c:	00e7a023          	sw	a4,0(a5)
80001670:	fec42783          	lw	a5,-20(s0)
80001674:	0007d313          	srli	t1,a5,0x0
80001678:	00000393          	li	t2,0
8000167c:	800037b7          	lui	a5,0x80003
80001680:	ddc7a783          	lw	a5,-548(a5) # 80002ddc <__stack_top+0xfffc6dbc>
80001684:	00030713          	mv	a4,t1
80001688:	00e7a223          	sw	a4,4(a5)
8000168c:	08000793          	li	a5,128
80001690:	3047a073          	csrs	mie,a5
80001694:	00000013          	nop
80001698:	01c12403          	lw	s0,28(sp)
8000169c:	02010113          	addi	sp,sp,32
800016a0:	00008067          	ret
800016a4:	0000                	unimp
	...

800016a8 <prvTaskExitError>:
prvTaskExitError():
800016a8:	ff010113          	addi	sp,sp,-16
800016ac:	00812623          	sw	s0,12(sp)
800016b0:	01010413          	addi	s0,sp,16
800016b4:	800037b7          	lui	a5,0x80003
800016b8:	dd47a703          	lw	a4,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
800016bc:	fff00793          	li	a5,-1
800016c0:	00f70663          	beq	a4,a5,800016cc <prvTaskExitError+0x24>
800016c4:	30047073          	csrci	mstatus,8
800016c8:	0000006f          	j	800016c8 <prvTaskExitError+0x20>
800016cc:	30047073          	csrci	mstatus,8
800016d0:	0000006f          	j	800016d0 <prvTaskExitError+0x28>
800016d4:	0000                	unimp
	...

800016d8 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800016d8:	fe010113          	addi	sp,sp,-32
800016dc:	00812e23          	sw	s0,28(sp)
800016e0:	02010413          	addi	s0,sp,32
800016e4:	fea42623          	sw	a0,-20(s0)
800016e8:	feb42423          	sw	a1,-24(s0)
800016ec:	fec42223          	sw	a2,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800016f0:	fec42783          	lw	a5,-20(s0)
800016f4:	ffc78793          	addi	a5,a5,-4
800016f8:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800016fc:	fe842703          	lw	a4,-24(s0)
80001700:	fec42783          	lw	a5,-20(s0)
80001704:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001708:	fec42783          	lw	a5,-20(s0)
8000170c:	fa878793          	addi	a5,a5,-88
80001710:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001714:	fe442703          	lw	a4,-28(s0)
80001718:	fec42783          	lw	a5,-20(s0)
8000171c:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
80001720:	fec42783          	lw	a5,-20(s0)
80001724:	fe878793          	addi	a5,a5,-24
80001728:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
8000172c:	00018793          	mv	a5,gp
80001730:	00078713          	mv	a4,a5
80001734:	fec42783          	lw	a5,-20(s0)
80001738:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
8000173c:	fec42783          	lw	a5,-20(s0)
80001740:	ff478793          	addi	a5,a5,-12
80001744:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80001748:	800017b7          	lui	a5,0x80001
8000174c:	6a878713          	addi	a4,a5,1704 # 800016a8 <__stack_top+0xfffc5688>
80001750:	fec42783          	lw	a5,-20(s0)
80001754:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001758:	fec42783          	lw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
8000175c:	00078513          	mv	a0,a5
80001760:	01c12403          	lw	s0,28(sp)
80001764:	02010113          	addi	sp,sp,32
80001768:	00008067          	ret
8000176c:	0000                	unimp
	...

80001770 <SysTick_Handler>:
SysTick_Handler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001770:	ff010113          	addi	sp,sp,-16
80001774:	00112623          	sw	ra,12(sp)
80001778:	00812423          	sw	s0,8(sp)
8000177c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001780:	00001297          	auipc	t0,0x1
80001784:	77c2a283          	lw	t0,1916(t0) # 80002efc <pxCurrentTCB>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001788:	00c2a023          	sw	a2,0(t0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
8000178c:	d7dff0ef          	jal	ra,80001508 <prvSetNextTimerInterrupt>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001790:	2b5000ef          	jal	ra,80002244 <xTaskIncrementTick>
80001794:	00050793          	mv	a5,a0
80001798:	00078463          	beqz	a5,800017a0 <SysTick_Handler+0x30>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
8000179c:	499000ef          	jal	ra,80002434 <vTaskSwitchContext>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800017a0:	00001117          	auipc	sp,0x1
800017a4:	75c12103          	lw	sp,1884(sp) # 80002efc <pxCurrentTCB>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
800017a8:	00012103          	lw	sp,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
800017ac:	07c12283          	lw	t0,124(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
800017b0:	34129073          	csrw	mepc,t0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
800017b4:	00012083          	lw	ra,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
800017b8:	00c12203          	lw	tp,12(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
800017bc:	01012283          	lw	t0,16(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
800017c0:	01412303          	lw	t1,20(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
800017c4:	01812383          	lw	t2,24(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
800017c8:	01c12403          	lw	s0,28(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
800017cc:	02012483          	lw	s1,32(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
800017d0:	02412503          	lw	a0,36(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
800017d4:	02812583          	lw	a1,40(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
800017d8:	02c12603          	lw	a2,44(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
800017dc:	03012683          	lw	a3,48(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
800017e0:	03412703          	lw	a4,52(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
800017e4:	03812783          	lw	a5,56(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
800017e8:	03c12803          	lw	a6,60(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
800017ec:	04012883          	lw	a7,64(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
800017f0:	04412903          	lw	s2,68(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
800017f4:	04812983          	lw	s3,72(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
800017f8:	04c12a03          	lw	s4,76(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
800017fc:	05012a83          	lw	s5,80(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
80001800:	05412b03          	lw	s6,84(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
80001804:	05812b83          	lw	s7,88(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001808:	05c12c03          	lw	s8,92(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
8000180c:	06012c83          	lw	s9,96(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
80001810:	06412d03          	lw	s10,100(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
80001814:	06812d83          	lw	s11,104(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001818:	06c12e03          	lw	t3,108(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
8000181c:	07012e83          	lw	t4,112(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
80001820:	07412f03          	lw	t5,116(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
80001824:	07812f83          	lw	t6,120(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
80001828:	08010113          	addi	sp,sp,128
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
8000182c:	30200073          	mret
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
80001830:	00000013          	nop
80001834:	00c12083          	lw	ra,12(sp)
80001838:	00812403          	lw	s0,8(sp)
8000183c:	01010113          	addi	sp,sp,16
80001840:	00008067          	ret
80001844:	0000                	unimp
	...

80001848 <xPortStartScheduler>:
xPortStartScheduler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001848:	ff010113          	addi	sp,sp,-16
8000184c:	00112623          	sw	ra,12(sp)
80001850:	00812423          	sw	s0,8(sp)
80001854:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
80001858:	d81ff0ef          	jal	ra,800015d8 <vPortSetupTimer>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
8000185c:	800037b7          	lui	a5,0x80003
80001860:	dc07aa23          	sw	zero,-556(a5) # 80002dd4 <__stack_top+0xfffc6db4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
80001864:	00100713          	li	a4,1
80001868:	92e1a423          	sw	a4,-1752(gp) # 80002ef8 <g_startscheduler>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
8000186c:	bb9fe0ef          	jal	ra,80000424 <__enable_irq>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
80001870:	bcdff0ef          	jal	ra,8000143c <raise_soft_interrupt>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
80001874:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
80001878:	00078513          	mv	a0,a5
8000187c:	00c12083          	lw	ra,12(sp)
80001880:	00812403          	lw	s0,8(sp)
80001884:	01010113          	addi	sp,sp,16
80001888:	00008067          	ret
8000188c:	0000                	unimp
	...

80001890 <Software_IRQHandler>:
Software_IRQHandler():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001890:	ff010113          	addi	sp,sp,-16
80001894:	00112623          	sw	ra,12(sp)
80001898:	00812423          	sw	s0,8(sp)
8000189c:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
800018a0:	9281a703          	lw	a4,-1752(gp) # 80002ef8 <g_startscheduler>
800018a4:	00100793          	li	a5,1
800018a8:	00f71863          	bne	a4,a5,800018b8 <Software_IRQHandler+0x28>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
800018ac:	00200713          	li	a4,2
800018b0:	92e1a423          	sw	a4,-1752(gp) # 80002ef8 <g_startscheduler>
800018b4:	0140006f          	j	800018c8 <Software_IRQHandler+0x38>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
800018b8:	00001297          	auipc	t0,0x1
800018bc:	6442a283          	lw	t0,1604(t0) # 80002efc <pxCurrentTCB>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
800018c0:	00c2a023          	sw	a2,0(t0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
800018c4:	371000ef          	jal	ra,80002434 <vTaskSwitchContext>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
800018c8:	440007b7          	lui	a5,0x44000
800018cc:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800018d0:	00001117          	auipc	sp,0x1
800018d4:	62c12103          	lw	sp,1580(sp) # 80002efc <pxCurrentTCB>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
800018d8:	00012103          	lw	sp,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
800018dc:	07c12283          	lw	t0,124(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
800018e0:	34129073          	csrw	mepc,t0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
800018e4:	00012083          	lw	ra,0(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
800018e8:	00c12203          	lw	tp,12(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
800018ec:	01012283          	lw	t0,16(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
800018f0:	01412303          	lw	t1,20(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
800018f4:	01812383          	lw	t2,24(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
800018f8:	01c12403          	lw	s0,28(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
800018fc:	02012483          	lw	s1,32(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
80001900:	02412503          	lw	a0,36(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
80001904:	02812583          	lw	a1,40(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001908:	02c12603          	lw	a2,44(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
8000190c:	03012683          	lw	a3,48(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001910:	03412703          	lw	a4,52(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
80001914:	03812783          	lw	a5,56(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001918:	03c12803          	lw	a6,60(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
8000191c:	04012883          	lw	a7,64(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001920:	04412903          	lw	s2,68(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
80001924:	04812983          	lw	s3,72(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001928:	04c12a03          	lw	s4,76(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
8000192c:	05012a83          	lw	s5,80(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
80001930:	05412b03          	lw	s6,84(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
80001934:	05812b83          	lw	s7,88(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
80001938:	05c12c03          	lw	s8,92(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
8000193c:	06012c83          	lw	s9,96(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
80001940:	06412d03          	lw	s10,100(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
80001944:	06812d83          	lw	s11,104(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
80001948:	06c12e03          	lw	t3,108(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
8000194c:	07012e83          	lw	t4,112(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
80001950:	07412f03          	lw	t5,116(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
80001954:	07812f83          	lw	t6,120(sp)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
80001958:	08010113          	addi	sp,sp,128
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
8000195c:	30200073          	mret
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
80001960:	00000013          	nop
80001964:	00c12083          	lw	ra,12(sp)
80001968:	00812403          	lw	s0,8(sp)
8000196c:	01010113          	addi	sp,sp,16
80001970:	00008067          	ret
80001974:	0000                	unimp
	...

80001978 <vPortYield>:
vPortYield():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
80001978:	ff010113          	addi	sp,sp,-16
8000197c:	00112623          	sw	ra,12(sp)
80001980:	00812423          	sw	s0,8(sp)
80001984:	01010413          	addi	s0,sp,16
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
80001988:	ab5ff0ef          	jal	ra,8000143c <raise_soft_interrupt>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
8000198c:	00000013          	nop
80001990:	00c12083          	lw	ra,12(sp)
80001994:	00812403          	lw	s0,8(sp)
80001998:	01010113          	addi	sp,sp,16
8000199c:	00008067          	ret
800019a0:	0000                	unimp
	...

800019a4 <vListInitialise>:
vListInitialise():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
800019a4:	fe010113          	addi	sp,sp,-32
800019a8:	00812e23          	sw	s0,28(sp)
800019ac:	02010413          	addi	s0,sp,32
800019b0:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800019b4:	fec42783          	lw	a5,-20(s0)
800019b8:	00878713          	addi	a4,a5,8
800019bc:	fec42783          	lw	a5,-20(s0)
800019c0:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
800019c4:	fec42783          	lw	a5,-20(s0)
800019c8:	fff00713          	li	a4,-1
800019cc:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800019d0:	fec42783          	lw	a5,-20(s0)
800019d4:	00878713          	addi	a4,a5,8
800019d8:	fec42783          	lw	a5,-20(s0)
800019dc:	00e7a623          	sw	a4,12(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800019e0:	fec42783          	lw	a5,-20(s0)
800019e4:	00878713          	addi	a4,a5,8
800019e8:	fec42783          	lw	a5,-20(s0)
800019ec:	00e7a823          	sw	a4,16(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
800019f0:	fec42783          	lw	a5,-20(s0)
800019f4:	0007a023          	sw	zero,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
800019f8:	00000013          	nop
800019fc:	01c12403          	lw	s0,28(sp)
80001a00:	02010113          	addi	sp,sp,32
80001a04:	00008067          	ret
80001a08:	0000                	unimp
	...

80001a0c <vListInitialiseItem>:
vListInitialiseItem():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001a0c:	fe010113          	addi	sp,sp,-32
80001a10:	00812e23          	sw	s0,28(sp)
80001a14:	02010413          	addi	s0,sp,32
80001a18:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001a1c:	fec42783          	lw	a5,-20(s0)
80001a20:	0007a823          	sw	zero,16(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001a24:	00000013          	nop
80001a28:	01c12403          	lw	s0,28(sp)
80001a2c:	02010113          	addi	sp,sp,32
80001a30:	00008067          	ret
80001a34:	0000                	unimp
	...

80001a38 <vListInsertEnd>:
vListInsertEnd():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001a38:	fd010113          	addi	sp,sp,-48
80001a3c:	02812623          	sw	s0,44(sp)
80001a40:	03010413          	addi	s0,sp,48
80001a44:	fca42e23          	sw	a0,-36(s0)
80001a48:	fcb42c23          	sw	a1,-40(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001a4c:	fdc42783          	lw	a5,-36(s0)
80001a50:	0047a783          	lw	a5,4(a5)
80001a54:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001a58:	fd842783          	lw	a5,-40(s0)
80001a5c:	fec42703          	lw	a4,-20(s0)
80001a60:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001a64:	fec42783          	lw	a5,-20(s0)
80001a68:	0087a703          	lw	a4,8(a5)
80001a6c:	fd842783          	lw	a5,-40(s0)
80001a70:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001a74:	fec42783          	lw	a5,-20(s0)
80001a78:	0087a783          	lw	a5,8(a5)
80001a7c:	fd842703          	lw	a4,-40(s0)
80001a80:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001a84:	fec42783          	lw	a5,-20(s0)
80001a88:	fd842703          	lw	a4,-40(s0)
80001a8c:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001a90:	fd842783          	lw	a5,-40(s0)
80001a94:	fdc42703          	lw	a4,-36(s0)
80001a98:	00e7a823          	sw	a4,16(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001a9c:	fdc42783          	lw	a5,-36(s0)
80001aa0:	0007a783          	lw	a5,0(a5)
80001aa4:	00178713          	addi	a4,a5,1
80001aa8:	fdc42783          	lw	a5,-36(s0)
80001aac:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001ab0:	00000013          	nop
80001ab4:	02c12403          	lw	s0,44(sp)
80001ab8:	03010113          	addi	sp,sp,48
80001abc:	00008067          	ret
80001ac0:	0000                	unimp
	...

80001ac4 <vListInsert>:
vListInsert():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001ac4:	fd010113          	addi	sp,sp,-48
80001ac8:	02812623          	sw	s0,44(sp)
80001acc:	03010413          	addi	s0,sp,48
80001ad0:	fca42e23          	sw	a0,-36(s0)
80001ad4:	fcb42c23          	sw	a1,-40(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001ad8:	fd842783          	lw	a5,-40(s0)
80001adc:	0007a783          	lw	a5,0(a5)
80001ae0:	fef42423          	sw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001ae4:	fe842703          	lw	a4,-24(s0)
80001ae8:	fff00793          	li	a5,-1
80001aec:	00f71a63          	bne	a4,a5,80001b00 <vListInsert+0x3c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001af0:	fdc42783          	lw	a5,-36(s0)
80001af4:	0107a783          	lw	a5,16(a5)
80001af8:	fef42623          	sw	a5,-20(s0)
80001afc:	0340006f          	j	80001b30 <vListInsert+0x6c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b00:	fdc42783          	lw	a5,-36(s0)
80001b04:	00878793          	addi	a5,a5,8
80001b08:	fef42623          	sw	a5,-20(s0)
80001b0c:	0100006f          	j	80001b1c <vListInsert+0x58>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001b10:	fec42783          	lw	a5,-20(s0)
80001b14:	0047a783          	lw	a5,4(a5)
80001b18:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001b1c:	fec42783          	lw	a5,-20(s0)
80001b20:	0047a783          	lw	a5,4(a5)
80001b24:	0007a783          	lw	a5,0(a5)
80001b28:	fe842703          	lw	a4,-24(s0)
80001b2c:	fef772e3          	bleu	a5,a4,80001b10 <vListInsert+0x4c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001b30:	fec42783          	lw	a5,-20(s0)
80001b34:	0047a703          	lw	a4,4(a5)
80001b38:	fd842783          	lw	a5,-40(s0)
80001b3c:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001b40:	fd842783          	lw	a5,-40(s0)
80001b44:	0047a783          	lw	a5,4(a5)
80001b48:	fd842703          	lw	a4,-40(s0)
80001b4c:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001b50:	fd842783          	lw	a5,-40(s0)
80001b54:	fec42703          	lw	a4,-20(s0)
80001b58:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001b5c:	fec42783          	lw	a5,-20(s0)
80001b60:	fd842703          	lw	a4,-40(s0)
80001b64:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001b68:	fd842783          	lw	a5,-40(s0)
80001b6c:	fdc42703          	lw	a4,-36(s0)
80001b70:	00e7a823          	sw	a4,16(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001b74:	fdc42783          	lw	a5,-36(s0)
80001b78:	0007a783          	lw	a5,0(a5)
80001b7c:	00178713          	addi	a4,a5,1
80001b80:	fdc42783          	lw	a5,-36(s0)
80001b84:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001b88:	00000013          	nop
80001b8c:	02c12403          	lw	s0,44(sp)
80001b90:	03010113          	addi	sp,sp,48
80001b94:	00008067          	ret
80001b98:	0000                	unimp
	...

80001b9c <uxListRemove>:
uxListRemove():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001b9c:	fd010113          	addi	sp,sp,-48
80001ba0:	02812623          	sw	s0,44(sp)
80001ba4:	03010413          	addi	s0,sp,48
80001ba8:	fca42e23          	sw	a0,-36(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001bac:	fdc42783          	lw	a5,-36(s0)
80001bb0:	0107a783          	lw	a5,16(a5)
80001bb4:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001bb8:	fdc42783          	lw	a5,-36(s0)
80001bbc:	0047a783          	lw	a5,4(a5)
80001bc0:	fdc42703          	lw	a4,-36(s0)
80001bc4:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001bc8:	00e7a423          	sw	a4,8(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001bcc:	fdc42783          	lw	a5,-36(s0)
80001bd0:	0087a783          	lw	a5,8(a5)
80001bd4:	fdc42703          	lw	a4,-36(s0)
80001bd8:	00472703          	lw	a4,4(a4)
80001bdc:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001be0:	fec42783          	lw	a5,-20(s0)
80001be4:	0047a783          	lw	a5,4(a5)
80001be8:	fdc42703          	lw	a4,-36(s0)
80001bec:	00f71a63          	bne	a4,a5,80001c00 <uxListRemove+0x64>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001bf0:	fdc42783          	lw	a5,-36(s0)
80001bf4:	0087a703          	lw	a4,8(a5)
80001bf8:	fec42783          	lw	a5,-20(s0)
80001bfc:	00e7a223          	sw	a4,4(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	0007a823          	sw	zero,16(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001c08:	fec42783          	lw	a5,-20(s0)
80001c0c:	0007a783          	lw	a5,0(a5)
80001c10:	fff78713          	addi	a4,a5,-1
80001c14:	fec42783          	lw	a5,-20(s0)
80001c18:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001c1c:	fec42783          	lw	a5,-20(s0)
80001c20:	0007a783          	lw	a5,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001c24:	00078513          	mv	a0,a5
80001c28:	02c12403          	lw	s0,44(sp)
80001c2c:	03010113          	addi	sp,sp,48
80001c30:	00008067          	ret
80001c34:	0000                	unimp
	...

80001c38 <memset>:
memset():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001c38:	fd010113          	addi	sp,sp,-48
80001c3c:	02812623          	sw	s0,44(sp)
80001c40:	03010413          	addi	s0,sp,48
80001c44:	fca42e23          	sw	a0,-36(s0)
80001c48:	fcb42c23          	sw	a1,-40(s0)
80001c4c:	fcc42a23          	sw	a2,-44(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001c50:	fdc42703          	lw	a4,-36(s0)
80001c54:	fd442783          	lw	a5,-44(s0)
80001c58:	00f767b3          	or	a5,a4,a5
80001c5c:	0037f793          	andi	a5,a5,3
80001c60:	06079863          	bnez	a5,80001cd0 <memset+0x98>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001c64:	fd842783          	lw	a5,-40(s0)
80001c68:	0ff7f793          	andi	a5,a5,255
80001c6c:	fef42223          	sw	a5,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001c70:	fe442783          	lw	a5,-28(s0)
80001c74:	00879793          	slli	a5,a5,0x8
80001c78:	fe442703          	lw	a4,-28(s0)
80001c7c:	00f767b3          	or	a5,a4,a5
80001c80:	fef42223          	sw	a5,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001c84:	fe442783          	lw	a5,-28(s0)
80001c88:	01079793          	slli	a5,a5,0x10
80001c8c:	fe442703          	lw	a4,-28(s0)
80001c90:	00f767b3          	or	a5,a4,a5
80001c94:	fef42223          	sw	a5,-28(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001c98:	fdc42783          	lw	a5,-36(s0)
80001c9c:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001ca0:	0180006f          	j	80001cb8 <memset+0x80>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001ca4:	fec42783          	lw	a5,-20(s0)
80001ca8:	00478713          	addi	a4,a5,4
80001cac:	fee42623          	sw	a4,-20(s0)
80001cb0:	fe442703          	lw	a4,-28(s0)
80001cb4:	00e7a023          	sw	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001cb8:	fdc42703          	lw	a4,-36(s0)
80001cbc:	fd442783          	lw	a5,-44(s0)
80001cc0:	00f707b3          	add	a5,a4,a5
80001cc4:	fec42703          	lw	a4,-20(s0)
80001cc8:	fcf76ee3          	bltu	a4,a5,80001ca4 <memset+0x6c>
80001ccc:	0400006f          	j	80001d0c <memset+0xd4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001cd0:	fdc42783          	lw	a5,-36(s0)
80001cd4:	fef42423          	sw	a5,-24(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001cd8:	0200006f          	j	80001cf8 <memset+0xc0>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001cdc:	fe842783          	lw	a5,-24(s0)
80001ce0:	00178713          	addi	a4,a5,1
80001ce4:	fee42423          	sw	a4,-24(s0)
80001ce8:	fd842703          	lw	a4,-40(s0)
80001cec:	01871713          	slli	a4,a4,0x18
80001cf0:	41875713          	srai	a4,a4,0x18
80001cf4:	00e78023          	sb	a4,0(a5)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001cf8:	fdc42703          	lw	a4,-36(s0)
80001cfc:	fd442783          	lw	a5,-44(s0)
80001d00:	00f707b3          	add	a5,a4,a5
80001d04:	fe842703          	lw	a4,-24(s0)
80001d08:	fcf76ae3          	bltu	a4,a5,80001cdc <memset+0xa4>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001d0c:	fdc42783          	lw	a5,-36(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001d10:	00078513          	mv	a0,a5
80001d14:	02c12403          	lw	s0,44(sp)
80001d18:	03010113          	addi	sp,sp,48
80001d1c:	00008067          	ret
80001d20:	0000                	unimp
	...

80001d24 <strlen>:
strlen():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001d24:	fd010113          	addi	sp,sp,-48
80001d28:	02812623          	sw	s0,44(sp)
80001d2c:	03010413          	addi	s0,sp,48
80001d30:	fca42e23          	sw	a0,-36(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001d34:	fdc42783          	lw	a5,-36(s0)
80001d38:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001d3c:	0100006f          	j	80001d4c <strlen+0x28>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001d40:	fec42783          	lw	a5,-20(s0)
80001d44:	00178793          	addi	a5,a5,1
80001d48:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001d4c:	fec42783          	lw	a5,-20(s0)
80001d50:	00078783          	lb	a5,0(a5)
80001d54:	fe0796e3          	bnez	a5,80001d40 <strlen+0x1c>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001d58:	fec42703          	lw	a4,-20(s0)
80001d5c:	fdc42783          	lw	a5,-36(s0)
80001d60:	40f707b3          	sub	a5,a4,a5
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001d64:	00078513          	mv	a0,a5
80001d68:	02c12403          	lw	s0,44(sp)
80001d6c:	03010113          	addi	sp,sp,48
80001d70:	00008067          	ret
80001d74:	0000                	unimp
	...

80001d78 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3274
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
80001d78:	fc010113          	addi	sp,sp,-64
80001d7c:	02112e23          	sw	ra,60(sp)
80001d80:	02812c23          	sw	s0,56(sp)
80001d84:	04010413          	addi	s0,sp,64
80001d88:	fca42e23          	sw	a0,-36(s0)
80001d8c:	fcb42c23          	sw	a1,-40(s0)
80001d90:	fcd42823          	sw	a3,-48(s0)
80001d94:	fce42623          	sw	a4,-52(s0)
80001d98:	fcf42423          	sw	a5,-56(s0)
80001d9c:	fd042223          	sw	a6,-60(s0)
80001da0:	fd142023          	sw	a7,-64(s0)
80001da4:	00060793          	mv	a5,a2
80001da8:	fcf41b23          	sh	a5,-42(s0)
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	00079663          	bnez	a5,80001dbc <xTaskGenericCreate+0x44>
80001db4:	30047073          	csrci	mstatus,8
80001db8:	0000006f          	j	80001db8 <xTaskGenericCreate+0x40>
80001dbc:	fcc42703          	lw	a4,-52(s0)
80001dc0:	00400793          	li	a5,4
80001dc4:	00e7f663          	bleu	a4,a5,80001dd0 <xTaskGenericCreate+0x58>
80001dc8:	30047073          	csrci	mstatus,8
80001dcc:	0000006f          	j	80001dcc <xTaskGenericCreate+0x54>
80001dd0:	fd645783          	lhu	a5,-42(s0)
80001dd4:	fc442583          	lw	a1,-60(s0)
80001dd8:	00078513          	mv	a0,a5
80001ddc:	2b1000ef          	jal	ra,8000288c <prvAllocateTCBAndStack>
80001de0:	fea42423          	sw	a0,-24(s0)
80001de4:	fe842783          	lw	a5,-24(s0)
80001de8:	16078263          	beqz	a5,80001f4c <xTaskGenericCreate+0x1d4>
80001dec:	fe842783          	lw	a5,-24(s0)
80001df0:	0307a703          	lw	a4,48(a5)
80001df4:	fd645683          	lhu	a3,-42(s0)
80001df8:	400007b7          	lui	a5,0x40000
80001dfc:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001e00:	00f687b3          	add	a5,a3,a5
80001e04:	00279793          	slli	a5,a5,0x2
80001e08:	00f707b3          	add	a5,a4,a5
80001e0c:	fef42223          	sw	a5,-28(s0)
80001e10:	fe442783          	lw	a5,-28(s0)
80001e14:	ffc7f793          	andi	a5,a5,-4
80001e18:	fef42223          	sw	a5,-28(s0)
80001e1c:	fe442783          	lw	a5,-28(s0)
80001e20:	0037f793          	andi	a5,a5,3
80001e24:	00078663          	beqz	a5,80001e30 <xTaskGenericCreate+0xb8>
80001e28:	30047073          	csrci	mstatus,8
80001e2c:	0000006f          	j	80001e2c <xTaskGenericCreate+0xb4>
80001e30:	fd645783          	lhu	a5,-42(s0)
80001e34:	00078713          	mv	a4,a5
80001e38:	fc042683          	lw	a3,-64(s0)
80001e3c:	fcc42603          	lw	a2,-52(s0)
80001e40:	fd842583          	lw	a1,-40(s0)
80001e44:	fe842503          	lw	a0,-24(s0)
80001e48:	714000ef          	jal	ra,8000255c <prvInitialiseTCBVariables>
80001e4c:	fd042603          	lw	a2,-48(s0)
80001e50:	fdc42583          	lw	a1,-36(s0)
80001e54:	fe442503          	lw	a0,-28(s0)
80001e58:	881ff0ef          	jal	ra,800016d8 <pxPortInitialiseStack>
80001e5c:	00050713          	mv	a4,a0
80001e60:	fe842783          	lw	a5,-24(s0)
80001e64:	00e7a023          	sw	a4,0(a5)
80001e68:	fc842783          	lw	a5,-56(s0)
80001e6c:	00078863          	beqz	a5,80001e7c <xTaskGenericCreate+0x104>
80001e70:	fc842783          	lw	a5,-56(s0)
80001e74:	fe842703          	lw	a4,-24(s0)
80001e78:	00e7a023          	sw	a4,0(a5)
80001e7c:	e10ff0ef          	jal	ra,8000148c <vPortEnterCritical>
80001e80:	93c1a783          	lw	a5,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
80001e84:	00178713          	addi	a4,a5,1
80001e88:	92e1ae23          	sw	a4,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
80001e8c:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80001e90:	02079063          	bnez	a5,80001eb0 <xTaskGenericCreate+0x138>
80001e94:	fe842703          	lw	a4,-24(s0)
80001e98:	92e1a623          	sw	a4,-1748(gp) # 80002efc <pxCurrentTCB>
80001e9c:	93c1a703          	lw	a4,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
80001ea0:	00100793          	li	a5,1
80001ea4:	02f71663          	bne	a4,a5,80001ed0 <xTaskGenericCreate+0x158>
80001ea8:	7f0000ef          	jal	ra,80002698 <prvInitialiseTaskLists>
80001eac:	0240006f          	j	80001ed0 <xTaskGenericCreate+0x158>
80001eb0:	9481a783          	lw	a5,-1720(gp) # 80002f18 <xSchedulerRunning>
80001eb4:	00079e63          	bnez	a5,80001ed0 <xTaskGenericCreate+0x158>
80001eb8:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80001ebc:	02c7a783          	lw	a5,44(a5)
80001ec0:	fcc42703          	lw	a4,-52(s0)
80001ec4:	00f76663          	bltu	a4,a5,80001ed0 <xTaskGenericCreate+0x158>
80001ec8:	fe842703          	lw	a4,-24(s0)
80001ecc:	92e1a623          	sw	a4,-1748(gp) # 80002efc <pxCurrentTCB>
80001ed0:	9581a783          	lw	a5,-1704(gp) # 80002f28 <uxTaskNumber>
80001ed4:	00178713          	addi	a4,a5,1
80001ed8:	94e1ac23          	sw	a4,-1704(gp) # 80002f28 <uxTaskNumber>
80001edc:	9581a703          	lw	a4,-1704(gp) # 80002f28 <uxTaskNumber>
80001ee0:	fe842783          	lw	a5,-24(s0)
80001ee4:	04e7a423          	sw	a4,72(a5)
80001ee8:	fe842783          	lw	a5,-24(s0)
80001eec:	02c7a703          	lw	a4,44(a5)
80001ef0:	9441a783          	lw	a5,-1724(gp) # 80002f14 <uxTopReadyPriority>
80001ef4:	00e7f863          	bleu	a4,a5,80001f04 <xTaskGenericCreate+0x18c>
80001ef8:	fe842783          	lw	a5,-24(s0)
80001efc:	02c7a703          	lw	a4,44(a5)
80001f00:	94e1a223          	sw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
80001f04:	fe842783          	lw	a5,-24(s0)
80001f08:	02c7a703          	lw	a4,44(a5)
80001f0c:	00070793          	mv	a5,a4
80001f10:	00279793          	slli	a5,a5,0x2
80001f14:	00e787b3          	add	a5,a5,a4
80001f18:	00279793          	slli	a5,a5,0x2
80001f1c:	8001c737          	lui	a4,0x8001c
80001f20:	f4070713          	addi	a4,a4,-192 # 8001bf40 <__stack_top+0xfffdff20>
80001f24:	00e78733          	add	a4,a5,a4
80001f28:	fe842783          	lw	a5,-24(s0)
80001f2c:	00478793          	addi	a5,a5,4
80001f30:	00078593          	mv	a1,a5
80001f34:	00070513          	mv	a0,a4
80001f38:	b01ff0ef          	jal	ra,80001a38 <vListInsertEnd>
80001f3c:	00100793          	li	a5,1
80001f40:	fef42623          	sw	a5,-20(s0)
80001f44:	d80ff0ef          	jal	ra,800014c4 <vPortExitCritical>
80001f48:	00c0006f          	j	80001f54 <xTaskGenericCreate+0x1dc>
80001f4c:	fff00793          	li	a5,-1
80001f50:	fef42623          	sw	a5,-20(s0)
80001f54:	fec42703          	lw	a4,-20(s0)
80001f58:	00100793          	li	a5,1
80001f5c:	02f71063          	bne	a4,a5,80001f7c <xTaskGenericCreate+0x204>
80001f60:	9481a783          	lw	a5,-1720(gp) # 80002f18 <xSchedulerRunning>
80001f64:	00078c63          	beqz	a5,80001f7c <xTaskGenericCreate+0x204>
80001f68:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80001f6c:	02c7a783          	lw	a5,44(a5)
80001f70:	fcc42703          	lw	a4,-52(s0)
80001f74:	00e7f463          	bleu	a4,a5,80001f7c <xTaskGenericCreate+0x204>
80001f78:	a01ff0ef          	jal	ra,80001978 <vPortYield>
80001f7c:	fec42783          	lw	a5,-20(s0)
80001f80:	00078513          	mv	a0,a5
80001f84:	03c12083          	lw	ra,60(sp)
80001f88:	03812403          	lw	s0,56(sp)
80001f8c:	04010113          	addi	sp,sp,64
80001f90:	00008067          	ret
80001f94:	0000                	unimp
	...

80001f98 <vTaskDelay>:
vTaskDelay():
80001f98:	fd010113          	addi	sp,sp,-48
80001f9c:	02112623          	sw	ra,44(sp)
80001fa0:	02812423          	sw	s0,40(sp)
80001fa4:	03010413          	addi	s0,sp,48
80001fa8:	fca42e23          	sw	a0,-36(s0)
80001fac:	fe042623          	sw	zero,-20(s0)
80001fb0:	fdc42783          	lw	a5,-36(s0)
80001fb4:	04078463          	beqz	a5,80001ffc <vTaskDelay+0x64>
80001fb8:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
80001fbc:	00078663          	beqz	a5,80001fc8 <vTaskDelay+0x30>
80001fc0:	30047073          	csrci	mstatus,8
80001fc4:	0000006f          	j	80001fc4 <vTaskDelay+0x2c>
80001fc8:	0ec000ef          	jal	ra,800020b4 <vTaskSuspendAll>
80001fcc:	9401a783          	lw	a5,-1728(gp) # 80002f10 <xTickCount>
80001fd0:	fdc42703          	lw	a4,-36(s0)
80001fd4:	00f707b3          	add	a5,a4,a5
80001fd8:	fef42423          	sw	a5,-24(s0)
80001fdc:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80001fe0:	00478793          	addi	a5,a5,4
80001fe4:	00078513          	mv	a0,a5
80001fe8:	bb5ff0ef          	jal	ra,80001b9c <uxListRemove>
80001fec:	fe842503          	lw	a0,-24(s0)
80001ff0:	011000ef          	jal	ra,80002800 <prvAddCurrentTaskToDelayedList>
80001ff4:	0ec000ef          	jal	ra,800020e0 <xTaskResumeAll>
80001ff8:	fea42623          	sw	a0,-20(s0)
80001ffc:	fec42783          	lw	a5,-20(s0)
80002000:	00079463          	bnez	a5,80002008 <vTaskDelay+0x70>
80002004:	975ff0ef          	jal	ra,80001978 <vPortYield>
80002008:	00000013          	nop
8000200c:	02c12083          	lw	ra,44(sp)
80002010:	02812403          	lw	s0,40(sp)
80002014:	03010113          	addi	sp,sp,48
80002018:	00008067          	ret
8000201c:	0000                	unimp
	...

80002020 <vTaskStartScheduler>:
vTaskStartScheduler():
80002020:	fe010113          	addi	sp,sp,-32
80002024:	00112e23          	sw	ra,28(sp)
80002028:	00812c23          	sw	s0,24(sp)
8000202c:	02010413          	addi	s0,sp,32
80002030:	00000893          	li	a7,0
80002034:	00000813          	li	a6,0
80002038:	00000793          	li	a5,0
8000203c:	00000713          	li	a4,0
80002040:	00000693          	li	a3,0
80002044:	40000613          	li	a2,1024
80002048:	800035b7          	lui	a1,0x80003
8000204c:	cf858593          	addi	a1,a1,-776 # 80002cf8 <__stack_top+0xfffc6cd8>
80002050:	80002537          	lui	a0,0x80002
80002054:	52450513          	addi	a0,a0,1316 # 80002524 <__stack_top+0xfffc6504>
80002058:	d21ff0ef          	jal	ra,80001d78 <xTaskGenericCreate>
8000205c:	fea42623          	sw	a0,-20(s0)
80002060:	fec42703          	lw	a4,-20(s0)
80002064:	00100793          	li	a5,1
80002068:	02f71263          	bne	a4,a5,8000208c <vTaskStartScheduler+0x6c>
8000206c:	30047073          	csrci	mstatus,8
80002070:	fff00713          	li	a4,-1
80002074:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
80002078:	00100713          	li	a4,1
8000207c:	94e1a423          	sw	a4,-1720(gp) # 80002f18 <xSchedulerRunning>
80002080:	9401a023          	sw	zero,-1728(gp) # 80002f10 <xTickCount>
80002084:	fc4ff0ef          	jal	ra,80001848 <xPortStartScheduler>
80002088:	0140006f          	j	8000209c <vTaskStartScheduler+0x7c>
8000208c:	fec42783          	lw	a5,-20(s0)
80002090:	00079663          	bnez	a5,8000209c <vTaskStartScheduler+0x7c>
80002094:	30047073          	csrci	mstatus,8
80002098:	0000006f          	j	80002098 <vTaskStartScheduler+0x78>
8000209c:	00000013          	nop
800020a0:	01c12083          	lw	ra,28(sp)
800020a4:	01812403          	lw	s0,24(sp)
800020a8:	02010113          	addi	sp,sp,32
800020ac:	00008067          	ret
800020b0:	0000                	unimp
	...

800020b4 <vTaskSuspendAll>:
vTaskSuspendAll():
800020b4:	ff010113          	addi	sp,sp,-16
800020b8:	00812623          	sw	s0,12(sp)
800020bc:	01010413          	addi	s0,sp,16
800020c0:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
800020c4:	00178713          	addi	a4,a5,1
800020c8:	96e1a023          	sw	a4,-1696(gp) # 80002f30 <uxSchedulerSuspended>
800020cc:	00000013          	nop
800020d0:	00c12403          	lw	s0,12(sp)
800020d4:	01010113          	addi	sp,sp,16
800020d8:	00008067          	ret
800020dc:	0000                	unimp
	...

800020e0 <xTaskResumeAll>:
xTaskResumeAll():
800020e0:	fe010113          	addi	sp,sp,-32
800020e4:	00112e23          	sw	ra,28(sp)
800020e8:	00812c23          	sw	s0,24(sp)
800020ec:	02010413          	addi	s0,sp,32
800020f0:	fe042623          	sw	zero,-20(s0)
800020f4:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
800020f8:	00079663          	bnez	a5,80002104 <xTaskResumeAll+0x24>
800020fc:	30047073          	csrci	mstatus,8
80002100:	0000006f          	j	80002100 <xTaskResumeAll+0x20>
80002104:	b88ff0ef          	jal	ra,8000148c <vPortEnterCritical>
80002108:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
8000210c:	fff78713          	addi	a4,a5,-1
80002110:	96e1a023          	sw	a4,-1696(gp) # 80002f30 <uxSchedulerSuspended>
80002114:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
80002118:	10079663          	bnez	a5,80002224 <xTaskResumeAll+0x144>
8000211c:	93c1a783          	lw	a5,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
80002120:	10078263          	beqz	a5,80002224 <xTaskResumeAll+0x144>
80002124:	0a80006f          	j	800021cc <xTaskResumeAll+0xec>
80002128:	8001c7b7          	lui	a5,0x8001c
8000212c:	fcc78793          	addi	a5,a5,-52 # 8001bfcc <__stack_top+0xfffdffac>
80002130:	00c7a783          	lw	a5,12(a5)
80002134:	00c7a783          	lw	a5,12(a5)
80002138:	fef42423          	sw	a5,-24(s0)
8000213c:	fe842783          	lw	a5,-24(s0)
80002140:	01878793          	addi	a5,a5,24
80002144:	00078513          	mv	a0,a5
80002148:	a55ff0ef          	jal	ra,80001b9c <uxListRemove>
8000214c:	fe842783          	lw	a5,-24(s0)
80002150:	00478793          	addi	a5,a5,4
80002154:	00078513          	mv	a0,a5
80002158:	a45ff0ef          	jal	ra,80001b9c <uxListRemove>
8000215c:	fe842783          	lw	a5,-24(s0)
80002160:	02c7a703          	lw	a4,44(a5)
80002164:	9441a783          	lw	a5,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002168:	00e7f863          	bleu	a4,a5,80002178 <xTaskResumeAll+0x98>
8000216c:	fe842783          	lw	a5,-24(s0)
80002170:	02c7a703          	lw	a4,44(a5)
80002174:	94e1a223          	sw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002178:	fe842783          	lw	a5,-24(s0)
8000217c:	02c7a703          	lw	a4,44(a5)
80002180:	00070793          	mv	a5,a4
80002184:	00279793          	slli	a5,a5,0x2
80002188:	00e787b3          	add	a5,a5,a4
8000218c:	00279793          	slli	a5,a5,0x2
80002190:	8001c737          	lui	a4,0x8001c
80002194:	f4070713          	addi	a4,a4,-192 # 8001bf40 <__stack_top+0xfffdff20>
80002198:	00e78733          	add	a4,a5,a4
8000219c:	fe842783          	lw	a5,-24(s0)
800021a0:	00478793          	addi	a5,a5,4
800021a4:	00078593          	mv	a1,a5
800021a8:	00070513          	mv	a0,a4
800021ac:	88dff0ef          	jal	ra,80001a38 <vListInsertEnd>
800021b0:	fe842783          	lw	a5,-24(s0)
800021b4:	02c7a703          	lw	a4,44(a5)
800021b8:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
800021bc:	02c7a783          	lw	a5,44(a5)
800021c0:	00f76663          	bltu	a4,a5,800021cc <xTaskResumeAll+0xec>
800021c4:	00100713          	li	a4,1
800021c8:	94e1a823          	sw	a4,-1712(gp) # 80002f20 <xYieldPending>
800021cc:	8001c7b7          	lui	a5,0x8001c
800021d0:	fcc7a783          	lw	a5,-52(a5) # 8001bfcc <__stack_top+0xfffdffac>
800021d4:	f4079ae3          	bnez	a5,80002128 <xTaskResumeAll+0x48>
800021d8:	94c1a783          	lw	a5,-1716(gp) # 80002f1c <uxPendedTicks>
800021dc:	02078863          	beqz	a5,8000220c <xTaskResumeAll+0x12c>
800021e0:	0240006f          	j	80002204 <xTaskResumeAll+0x124>
800021e4:	060000ef          	jal	ra,80002244 <xTaskIncrementTick>
800021e8:	00050793          	mv	a5,a0
800021ec:	00078663          	beqz	a5,800021f8 <xTaskResumeAll+0x118>
800021f0:	00100713          	li	a4,1
800021f4:	94e1a823          	sw	a4,-1712(gp) # 80002f20 <xYieldPending>
800021f8:	94c1a783          	lw	a5,-1716(gp) # 80002f1c <uxPendedTicks>
800021fc:	fff78713          	addi	a4,a5,-1
80002200:	94e1a623          	sw	a4,-1716(gp) # 80002f1c <uxPendedTicks>
80002204:	94c1a783          	lw	a5,-1716(gp) # 80002f1c <uxPendedTicks>
80002208:	fc079ee3          	bnez	a5,800021e4 <xTaskResumeAll+0x104>
8000220c:	9501a703          	lw	a4,-1712(gp) # 80002f20 <xYieldPending>
80002210:	00100793          	li	a5,1
80002214:	00f71863          	bne	a4,a5,80002224 <xTaskResumeAll+0x144>
80002218:	00100793          	li	a5,1
8000221c:	fef42623          	sw	a5,-20(s0)
80002220:	f58ff0ef          	jal	ra,80001978 <vPortYield>
80002224:	aa0ff0ef          	jal	ra,800014c4 <vPortExitCritical>
80002228:	fec42783          	lw	a5,-20(s0)
8000222c:	00078513          	mv	a0,a5
80002230:	01c12083          	lw	ra,28(sp)
80002234:	01812403          	lw	s0,24(sp)
80002238:	02010113          	addi	sp,sp,32
8000223c:	00008067          	ret
80002240:	0000                	unimp
	...

80002244 <xTaskIncrementTick>:
xTaskIncrementTick():
80002244:	fd010113          	addi	sp,sp,-48
80002248:	02112623          	sw	ra,44(sp)
8000224c:	02812423          	sw	s0,40(sp)
80002250:	03010413          	addi	s0,sp,48
80002254:	fe042623          	sw	zero,-20(s0)
80002258:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
8000225c:	1a079063          	bnez	a5,800023fc <xTaskIncrementTick+0x1b8>
80002260:	9401a783          	lw	a5,-1728(gp) # 80002f10 <xTickCount>
80002264:	00178713          	addi	a4,a5,1
80002268:	94e1a023          	sw	a4,-1728(gp) # 80002f10 <xTickCount>
8000226c:	9401a783          	lw	a5,-1728(gp) # 80002f10 <xTickCount>
80002270:	fef42423          	sw	a5,-24(s0)
80002274:	fe842783          	lw	a5,-24(s0)
80002278:	04079063          	bnez	a5,800022b8 <xTaskIncrementTick+0x74>
8000227c:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
80002280:	0007a783          	lw	a5,0(a5)
80002284:	00078663          	beqz	a5,80002290 <xTaskIncrementTick+0x4c>
80002288:	30047073          	csrci	mstatus,8
8000228c:	0000006f          	j	8000228c <xTaskIncrementTick+0x48>
80002290:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
80002294:	fef42223          	sw	a5,-28(s0)
80002298:	9341a703          	lw	a4,-1740(gp) # 80002f04 <pxOverflowDelayedTaskList>
8000229c:	92e1a823          	sw	a4,-1744(gp) # 80002f00 <pxDelayedTaskList>
800022a0:	fe442703          	lw	a4,-28(s0)
800022a4:	92e1aa23          	sw	a4,-1740(gp) # 80002f04 <pxOverflowDelayedTaskList>
800022a8:	9541a783          	lw	a5,-1708(gp) # 80002f24 <xNumOfOverflows>
800022ac:	00178713          	addi	a4,a5,1
800022b0:	94e1aa23          	sw	a4,-1708(gp) # 80002f24 <xNumOfOverflows>
800022b4:	6e0000ef          	jal	ra,80002994 <prvResetNextTaskUnblockTime>
800022b8:	95c1a783          	lw	a5,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
800022bc:	fe842703          	lw	a4,-24(s0)
800022c0:	10f76063          	bltu	a4,a5,800023c0 <xTaskIncrementTick+0x17c>
800022c4:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
800022c8:	0007a783          	lw	a5,0(a5)
800022cc:	00079663          	bnez	a5,800022d8 <xTaskIncrementTick+0x94>
800022d0:	00100793          	li	a5,1
800022d4:	0080006f          	j	800022dc <xTaskIncrementTick+0x98>
800022d8:	00000793          	li	a5,0
800022dc:	00078863          	beqz	a5,800022ec <xTaskIncrementTick+0xa8>
800022e0:	fff00713          	li	a4,-1
800022e4:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
800022e8:	0d80006f          	j	800023c0 <xTaskIncrementTick+0x17c>
800022ec:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
800022f0:	00c7a783          	lw	a5,12(a5)
800022f4:	00c7a783          	lw	a5,12(a5)
800022f8:	fef42023          	sw	a5,-32(s0)
800022fc:	fe042783          	lw	a5,-32(s0)
80002300:	0047a783          	lw	a5,4(a5)
80002304:	fcf42e23          	sw	a5,-36(s0)
80002308:	fe842703          	lw	a4,-24(s0)
8000230c:	fdc42783          	lw	a5,-36(s0)
80002310:	00f77863          	bleu	a5,a4,80002320 <xTaskIncrementTick+0xdc>
80002314:	fdc42703          	lw	a4,-36(s0)
80002318:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
8000231c:	0a40006f          	j	800023c0 <xTaskIncrementTick+0x17c>
80002320:	fe042783          	lw	a5,-32(s0)
80002324:	00478793          	addi	a5,a5,4
80002328:	00078513          	mv	a0,a5
8000232c:	871ff0ef          	jal	ra,80001b9c <uxListRemove>
80002330:	fe042783          	lw	a5,-32(s0)
80002334:	0287a783          	lw	a5,40(a5)
80002338:	00078a63          	beqz	a5,8000234c <xTaskIncrementTick+0x108>
8000233c:	fe042783          	lw	a5,-32(s0)
80002340:	01878793          	addi	a5,a5,24
80002344:	00078513          	mv	a0,a5
80002348:	855ff0ef          	jal	ra,80001b9c <uxListRemove>
8000234c:	fe042783          	lw	a5,-32(s0)
80002350:	02c7a703          	lw	a4,44(a5)
80002354:	9441a783          	lw	a5,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002358:	00e7f863          	bleu	a4,a5,80002368 <xTaskIncrementTick+0x124>
8000235c:	fe042783          	lw	a5,-32(s0)
80002360:	02c7a703          	lw	a4,44(a5)
80002364:	94e1a223          	sw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002368:	fe042783          	lw	a5,-32(s0)
8000236c:	02c7a703          	lw	a4,44(a5)
80002370:	00070793          	mv	a5,a4
80002374:	00279793          	slli	a5,a5,0x2
80002378:	00e787b3          	add	a5,a5,a4
8000237c:	00279793          	slli	a5,a5,0x2
80002380:	8001c737          	lui	a4,0x8001c
80002384:	f4070713          	addi	a4,a4,-192 # 8001bf40 <__stack_top+0xfffdff20>
80002388:	00e78733          	add	a4,a5,a4
8000238c:	fe042783          	lw	a5,-32(s0)
80002390:	00478793          	addi	a5,a5,4
80002394:	00078593          	mv	a1,a5
80002398:	00070513          	mv	a0,a4
8000239c:	e9cff0ef          	jal	ra,80001a38 <vListInsertEnd>
800023a0:	fe042783          	lw	a5,-32(s0)
800023a4:	02c7a703          	lw	a4,44(a5)
800023a8:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
800023ac:	02c7a783          	lw	a5,44(a5)
800023b0:	f0f76ae3          	bltu	a4,a5,800022c4 <xTaskIncrementTick+0x80>
800023b4:	00100793          	li	a5,1
800023b8:	fef42623          	sw	a5,-20(s0)
800023bc:	f09ff06f          	j	800022c4 <xTaskIncrementTick+0x80>
800023c0:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
800023c4:	02c7a703          	lw	a4,44(a5)
800023c8:	8001c6b7          	lui	a3,0x8001c
800023cc:	00070793          	mv	a5,a4
800023d0:	00279793          	slli	a5,a5,0x2
800023d4:	00e787b3          	add	a5,a5,a4
800023d8:	00279793          	slli	a5,a5,0x2
800023dc:	f4068713          	addi	a4,a3,-192 # 8001bf40 <__stack_top+0xfffdff20>
800023e0:	00e787b3          	add	a5,a5,a4
800023e4:	0007a703          	lw	a4,0(a5)
800023e8:	00100793          	li	a5,1
800023ec:	00e7fe63          	bleu	a4,a5,80002408 <xTaskIncrementTick+0x1c4>
800023f0:	00100793          	li	a5,1
800023f4:	fef42623          	sw	a5,-20(s0)
800023f8:	0100006f          	j	80002408 <xTaskIncrementTick+0x1c4>
800023fc:	94c1a783          	lw	a5,-1716(gp) # 80002f1c <uxPendedTicks>
80002400:	00178713          	addi	a4,a5,1
80002404:	94e1a623          	sw	a4,-1716(gp) # 80002f1c <uxPendedTicks>
80002408:	9501a783          	lw	a5,-1712(gp) # 80002f20 <xYieldPending>
8000240c:	00078663          	beqz	a5,80002418 <xTaskIncrementTick+0x1d4>
80002410:	00100793          	li	a5,1
80002414:	fef42623          	sw	a5,-20(s0)
80002418:	fec42783          	lw	a5,-20(s0)
8000241c:	00078513          	mv	a0,a5
80002420:	02c12083          	lw	ra,44(sp)
80002424:	02812403          	lw	s0,40(sp)
80002428:	03010113          	addi	sp,sp,48
8000242c:	00008067          	ret
80002430:	0000                	unimp
	...

80002434 <vTaskSwitchContext>:
vTaskSwitchContext():
80002434:	fe010113          	addi	sp,sp,-32
80002438:	00812e23          	sw	s0,28(sp)
8000243c:	02010413          	addi	s0,sp,32
80002440:	9601a783          	lw	a5,-1696(gp) # 80002f30 <uxSchedulerSuspended>
80002444:	00078863          	beqz	a5,80002454 <vTaskSwitchContext+0x20>
80002448:	00100713          	li	a4,1
8000244c:	94e1a823          	sw	a4,-1712(gp) # 80002f20 <xYieldPending>
80002450:	0c00006f          	j	80002510 <vTaskSwitchContext+0xdc>
80002454:	9401a823          	sw	zero,-1712(gp) # 80002f20 <xYieldPending>
80002458:	0200006f          	j	80002478 <vTaskSwitchContext+0x44>
8000245c:	9441a783          	lw	a5,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002460:	00079663          	bnez	a5,8000246c <vTaskSwitchContext+0x38>
80002464:	30047073          	csrci	mstatus,8
80002468:	0000006f          	j	80002468 <vTaskSwitchContext+0x34>
8000246c:	9441a783          	lw	a5,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002470:	fff78713          	addi	a4,a5,-1
80002474:	94e1a223          	sw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
80002478:	9441a703          	lw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
8000247c:	8001c6b7          	lui	a3,0x8001c
80002480:	00070793          	mv	a5,a4
80002484:	00279793          	slli	a5,a5,0x2
80002488:	00e787b3          	add	a5,a5,a4
8000248c:	00279793          	slli	a5,a5,0x2
80002490:	f4068713          	addi	a4,a3,-192 # 8001bf40 <__stack_top+0xfffdff20>
80002494:	00e787b3          	add	a5,a5,a4
80002498:	0007a783          	lw	a5,0(a5)
8000249c:	fc0780e3          	beqz	a5,8000245c <vTaskSwitchContext+0x28>
800024a0:	9441a703          	lw	a4,-1724(gp) # 80002f14 <uxTopReadyPriority>
800024a4:	00070793          	mv	a5,a4
800024a8:	00279793          	slli	a5,a5,0x2
800024ac:	00e787b3          	add	a5,a5,a4
800024b0:	00279793          	slli	a5,a5,0x2
800024b4:	8001c737          	lui	a4,0x8001c
800024b8:	f4070713          	addi	a4,a4,-192 # 8001bf40 <__stack_top+0xfffdff20>
800024bc:	00e787b3          	add	a5,a5,a4
800024c0:	fef42623          	sw	a5,-20(s0)
800024c4:	fec42783          	lw	a5,-20(s0)
800024c8:	0047a783          	lw	a5,4(a5)
800024cc:	0047a703          	lw	a4,4(a5)
800024d0:	fec42783          	lw	a5,-20(s0)
800024d4:	00e7a223          	sw	a4,4(a5)
800024d8:	fec42783          	lw	a5,-20(s0)
800024dc:	0047a703          	lw	a4,4(a5)
800024e0:	fec42783          	lw	a5,-20(s0)
800024e4:	00878793          	addi	a5,a5,8
800024e8:	00f71c63          	bne	a4,a5,80002500 <vTaskSwitchContext+0xcc>
800024ec:	fec42783          	lw	a5,-20(s0)
800024f0:	0047a783          	lw	a5,4(a5)
800024f4:	0047a703          	lw	a4,4(a5)
800024f8:	fec42783          	lw	a5,-20(s0)
800024fc:	00e7a223          	sw	a4,4(a5)
80002500:	fec42783          	lw	a5,-20(s0)
80002504:	0047a783          	lw	a5,4(a5)
80002508:	00c7a703          	lw	a4,12(a5)
8000250c:	92e1a623          	sw	a4,-1748(gp) # 80002efc <pxCurrentTCB>
80002510:	00000013          	nop
80002514:	01c12403          	lw	s0,28(sp)
80002518:	02010113          	addi	sp,sp,32
8000251c:	00008067          	ret
80002520:	0000                	unimp
	...

80002524 <prvIdleTask>:
prvIdleTask():
80002524:	fe010113          	addi	sp,sp,-32
80002528:	00112e23          	sw	ra,28(sp)
8000252c:	00812c23          	sw	s0,24(sp)
80002530:	02010413          	addi	s0,sp,32
80002534:	fea42623          	sw	a0,-20(s0)
80002538:	224000ef          	jal	ra,8000275c <prvCheckTasksWaitingTermination>
8000253c:	8001c7b7          	lui	a5,0x8001c
80002540:	f407a703          	lw	a4,-192(a5) # 8001bf40 <__stack_top+0xfffdff20>
80002544:	00100793          	li	a5,1
80002548:	00e7f463          	bleu	a4,a5,80002550 <prvIdleTask+0x2c>
8000254c:	c2cff0ef          	jal	ra,80001978 <vPortYield>
80002550:	660000ef          	jal	ra,80002bb0 <vApplicationIdleHook>
80002554:	fe5ff06f          	j	80002538 <prvIdleTask+0x14>
80002558:	0000                	unimp
	...

8000255c <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
8000255c:	fc010113          	addi	sp,sp,-64
80002560:	02112e23          	sw	ra,60(sp)
80002564:	02812c23          	sw	s0,56(sp)
80002568:	04010413          	addi	s0,sp,64
8000256c:	fca42e23          	sw	a0,-36(s0)
80002570:	fcb42c23          	sw	a1,-40(s0)
80002574:	fcc42a23          	sw	a2,-44(s0)
80002578:	fcd42823          	sw	a3,-48(s0)
8000257c:	00070793          	mv	a5,a4
80002580:	fcf41723          	sh	a5,-50(s0)
80002584:	fe042623          	sw	zero,-20(s0)
80002588:	0440006f          	j	800025cc <prvInitialiseTCBVariables+0x70>
8000258c:	fd842703          	lw	a4,-40(s0)
80002590:	fec42783          	lw	a5,-20(s0)
80002594:	00f707b3          	add	a5,a4,a5
80002598:	00078703          	lb	a4,0(a5)
8000259c:	fdc42683          	lw	a3,-36(s0)
800025a0:	fec42783          	lw	a5,-20(s0)
800025a4:	00f687b3          	add	a5,a3,a5
800025a8:	02e78a23          	sb	a4,52(a5)
800025ac:	fd842703          	lw	a4,-40(s0)
800025b0:	fec42783          	lw	a5,-20(s0)
800025b4:	00f707b3          	add	a5,a4,a5
800025b8:	00078783          	lb	a5,0(a5)
800025bc:	02078063          	beqz	a5,800025dc <prvInitialiseTCBVariables+0x80>
800025c0:	fec42783          	lw	a5,-20(s0)
800025c4:	00178793          	addi	a5,a5,1
800025c8:	fef42623          	sw	a5,-20(s0)
800025cc:	fec42703          	lw	a4,-20(s0)
800025d0:	00f00793          	li	a5,15
800025d4:	fae7fce3          	bleu	a4,a5,8000258c <prvInitialiseTCBVariables+0x30>
800025d8:	0080006f          	j	800025e0 <prvInitialiseTCBVariables+0x84>
800025dc:	00000013          	nop
800025e0:	fdc42783          	lw	a5,-36(s0)
800025e4:	040781a3          	sb	zero,67(a5)
800025e8:	fd442703          	lw	a4,-44(s0)
800025ec:	00400793          	li	a5,4
800025f0:	00e7f663          	bleu	a4,a5,800025fc <prvInitialiseTCBVariables+0xa0>
800025f4:	00400793          	li	a5,4
800025f8:	fcf42a23          	sw	a5,-44(s0)
800025fc:	fdc42783          	lw	a5,-36(s0)
80002600:	fd442703          	lw	a4,-44(s0)
80002604:	02e7a623          	sw	a4,44(a5)
80002608:	fdc42783          	lw	a5,-36(s0)
8000260c:	fd442703          	lw	a4,-44(s0)
80002610:	04e7a823          	sw	a4,80(a5)
80002614:	fdc42783          	lw	a5,-36(s0)
80002618:	0407aa23          	sw	zero,84(a5)
8000261c:	fdc42783          	lw	a5,-36(s0)
80002620:	00478793          	addi	a5,a5,4
80002624:	00078513          	mv	a0,a5
80002628:	be4ff0ef          	jal	ra,80001a0c <vListInitialiseItem>
8000262c:	fdc42783          	lw	a5,-36(s0)
80002630:	01878793          	addi	a5,a5,24
80002634:	00078513          	mv	a0,a5
80002638:	bd4ff0ef          	jal	ra,80001a0c <vListInitialiseItem>
8000263c:	fdc42783          	lw	a5,-36(s0)
80002640:	fdc42703          	lw	a4,-36(s0)
80002644:	00e7a823          	sw	a4,16(a5)
80002648:	00500713          	li	a4,5
8000264c:	fd442783          	lw	a5,-44(s0)
80002650:	40f70733          	sub	a4,a4,a5
80002654:	fdc42783          	lw	a5,-36(s0)
80002658:	00e7ac23          	sw	a4,24(a5)
8000265c:	fdc42783          	lw	a5,-36(s0)
80002660:	fdc42703          	lw	a4,-36(s0)
80002664:	02e7a223          	sw	a4,36(a5)
80002668:	fdc42783          	lw	a5,-36(s0)
8000266c:	0407a223          	sw	zero,68(a5)
80002670:	fdc42783          	lw	a5,-36(s0)
80002674:	0407ac23          	sw	zero,88(a5)
80002678:	fdc42783          	lw	a5,-36(s0)
8000267c:	0407ae23          	sw	zero,92(a5)
80002680:	00000013          	nop
80002684:	03c12083          	lw	ra,60(sp)
80002688:	03812403          	lw	s0,56(sp)
8000268c:	04010113          	addi	sp,sp,64
80002690:	00008067          	ret
80002694:	0000                	unimp
	...

80002698 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
80002698:	fe010113          	addi	sp,sp,-32
8000269c:	00112e23          	sw	ra,28(sp)
800026a0:	00812c23          	sw	s0,24(sp)
800026a4:	02010413          	addi	s0,sp,32
800026a8:	fe042623          	sw	zero,-20(s0)
800026ac:	0380006f          	j	800026e4 <prvInitialiseTaskLists+0x4c>
800026b0:	fec42703          	lw	a4,-20(s0)
800026b4:	00070793          	mv	a5,a4
800026b8:	00279793          	slli	a5,a5,0x2
800026bc:	00e787b3          	add	a5,a5,a4
800026c0:	00279793          	slli	a5,a5,0x2
800026c4:	8001c737          	lui	a4,0x8001c
800026c8:	f4070713          	addi	a4,a4,-192 # 8001bf40 <__stack_top+0xfffdff20>
800026cc:	00e787b3          	add	a5,a5,a4
800026d0:	00078513          	mv	a0,a5
800026d4:	ad0ff0ef          	jal	ra,800019a4 <vListInitialise>
800026d8:	fec42783          	lw	a5,-20(s0)
800026dc:	00178793          	addi	a5,a5,1
800026e0:	fef42623          	sw	a5,-20(s0)
800026e4:	fec42703          	lw	a4,-20(s0)
800026e8:	00400793          	li	a5,4
800026ec:	fce7f2e3          	bleu	a4,a5,800026b0 <prvInitialiseTaskLists+0x18>
800026f0:	8001c7b7          	lui	a5,0x8001c
800026f4:	fa478513          	addi	a0,a5,-92 # 8001bfa4 <__stack_top+0xfffdff84>
800026f8:	aacff0ef          	jal	ra,800019a4 <vListInitialise>
800026fc:	8001c7b7          	lui	a5,0x8001c
80002700:	fb878513          	addi	a0,a5,-72 # 8001bfb8 <__stack_top+0xfffdff98>
80002704:	aa0ff0ef          	jal	ra,800019a4 <vListInitialise>
80002708:	8001c7b7          	lui	a5,0x8001c
8000270c:	fcc78513          	addi	a0,a5,-52 # 8001bfcc <__stack_top+0xfffdffac>
80002710:	a94ff0ef          	jal	ra,800019a4 <vListInitialise>
80002714:	8001c7b7          	lui	a5,0x8001c
80002718:	fe078513          	addi	a0,a5,-32 # 8001bfe0 <__stack_top+0xfffdffc0>
8000271c:	a88ff0ef          	jal	ra,800019a4 <vListInitialise>
80002720:	8001c7b7          	lui	a5,0x8001c
80002724:	ff478513          	addi	a0,a5,-12 # 8001bff4 <__stack_top+0xfffdffd4>
80002728:	a7cff0ef          	jal	ra,800019a4 <vListInitialise>
8000272c:	8001c737          	lui	a4,0x8001c
80002730:	fa470713          	addi	a4,a4,-92 # 8001bfa4 <__stack_top+0xfffdff84>
80002734:	92e1a823          	sw	a4,-1744(gp) # 80002f00 <pxDelayedTaskList>
80002738:	8001c737          	lui	a4,0x8001c
8000273c:	fb870713          	addi	a4,a4,-72 # 8001bfb8 <__stack_top+0xfffdff98>
80002740:	92e1aa23          	sw	a4,-1740(gp) # 80002f04 <pxOverflowDelayedTaskList>
80002744:	00000013          	nop
80002748:	01c12083          	lw	ra,28(sp)
8000274c:	01812403          	lw	s0,24(sp)
80002750:	02010113          	addi	sp,sp,32
80002754:	00008067          	ret
80002758:	0000                	unimp
	...

8000275c <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
8000275c:	fe010113          	addi	sp,sp,-32
80002760:	00112e23          	sw	ra,28(sp)
80002764:	00812c23          	sw	s0,24(sp)
80002768:	02010413          	addi	s0,sp,32
8000276c:	0740006f          	j	800027e0 <prvCheckTasksWaitingTermination+0x84>
80002770:	945ff0ef          	jal	ra,800020b4 <vTaskSuspendAll>
80002774:	8001c7b7          	lui	a5,0x8001c
80002778:	fe07a783          	lw	a5,-32(a5) # 8001bfe0 <__stack_top+0xfffdffc0>
8000277c:	0017b793          	seqz	a5,a5
80002780:	0ff7f793          	andi	a5,a5,255
80002784:	fef42623          	sw	a5,-20(s0)
80002788:	959ff0ef          	jal	ra,800020e0 <xTaskResumeAll>
8000278c:	fec42783          	lw	a5,-20(s0)
80002790:	04079863          	bnez	a5,800027e0 <prvCheckTasksWaitingTermination+0x84>
80002794:	cf9fe0ef          	jal	ra,8000148c <vPortEnterCritical>
80002798:	8001c7b7          	lui	a5,0x8001c
8000279c:	fe078793          	addi	a5,a5,-32 # 8001bfe0 <__stack_top+0xfffdffc0>
800027a0:	00c7a783          	lw	a5,12(a5)
800027a4:	00c7a783          	lw	a5,12(a5)
800027a8:	fef42423          	sw	a5,-24(s0)
800027ac:	fe842783          	lw	a5,-24(s0)
800027b0:	00478793          	addi	a5,a5,4
800027b4:	00078513          	mv	a0,a5
800027b8:	be4ff0ef          	jal	ra,80001b9c <uxListRemove>
800027bc:	93c1a783          	lw	a5,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
800027c0:	fff78713          	addi	a4,a5,-1
800027c4:	92e1ae23          	sw	a4,-1732(gp) # 80002f0c <uxCurrentNumberOfTasks>
800027c8:	9381a783          	lw	a5,-1736(gp) # 80002f08 <uxTasksDeleted>
800027cc:	fff78713          	addi	a4,a5,-1
800027d0:	92e1ac23          	sw	a4,-1736(gp) # 80002f08 <uxTasksDeleted>
800027d4:	cf1fe0ef          	jal	ra,800014c4 <vPortExitCritical>
800027d8:	fe842503          	lw	a0,-24(s0)
800027dc:	174000ef          	jal	ra,80002950 <prvDeleteTCB>
800027e0:	9381a783          	lw	a5,-1736(gp) # 80002f08 <uxTasksDeleted>
800027e4:	f80796e3          	bnez	a5,80002770 <prvCheckTasksWaitingTermination+0x14>
800027e8:	00000013          	nop
800027ec:	01c12083          	lw	ra,28(sp)
800027f0:	01812403          	lw	s0,24(sp)
800027f4:	02010113          	addi	sp,sp,32
800027f8:	00008067          	ret
800027fc:	0000                	unimp
	...

80002800 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
80002800:	fe010113          	addi	sp,sp,-32
80002804:	00112e23          	sw	ra,28(sp)
80002808:	00812c23          	sw	s0,24(sp)
8000280c:	02010413          	addi	s0,sp,32
80002810:	fea42623          	sw	a0,-20(s0)
80002814:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80002818:	fec42703          	lw	a4,-20(s0)
8000281c:	00e7a223          	sw	a4,4(a5)
80002820:	9401a783          	lw	a5,-1728(gp) # 80002f10 <xTickCount>
80002824:	fec42703          	lw	a4,-20(s0)
80002828:	02f77063          	bleu	a5,a4,80002848 <prvAddCurrentTaskToDelayedList+0x48>
8000282c:	9341a703          	lw	a4,-1740(gp) # 80002f04 <pxOverflowDelayedTaskList>
80002830:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80002834:	00478793          	addi	a5,a5,4
80002838:	00078593          	mv	a1,a5
8000283c:	00070513          	mv	a0,a4
80002840:	a84ff0ef          	jal	ra,80001ac4 <vListInsert>
80002844:	0300006f          	j	80002874 <prvAddCurrentTaskToDelayedList+0x74>
80002848:	9301a703          	lw	a4,-1744(gp) # 80002f00 <pxDelayedTaskList>
8000284c:	92c1a783          	lw	a5,-1748(gp) # 80002efc <pxCurrentTCB>
80002850:	00478793          	addi	a5,a5,4
80002854:	00078593          	mv	a1,a5
80002858:	00070513          	mv	a0,a4
8000285c:	a68ff0ef          	jal	ra,80001ac4 <vListInsert>
80002860:	95c1a783          	lw	a5,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
80002864:	fec42703          	lw	a4,-20(s0)
80002868:	00f77663          	bleu	a5,a4,80002874 <prvAddCurrentTaskToDelayedList+0x74>
8000286c:	fec42703          	lw	a4,-20(s0)
80002870:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
80002874:	00000013          	nop
80002878:	01c12083          	lw	ra,28(sp)
8000287c:	01812403          	lw	s0,24(sp)
80002880:	02010113          	addi	sp,sp,32
80002884:	00008067          	ret
80002888:	0000                	unimp
	...

8000288c <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
8000288c:	fd010113          	addi	sp,sp,-48
80002890:	02112623          	sw	ra,44(sp)
80002894:	02812423          	sw	s0,40(sp)
80002898:	03010413          	addi	s0,sp,48
8000289c:	00050793          	mv	a5,a0
800028a0:	fcb42c23          	sw	a1,-40(s0)
800028a4:	fcf41f23          	sh	a5,-34(s0)
800028a8:	fd842783          	lw	a5,-40(s0)
800028ac:	00079e63          	bnez	a5,800028c8 <prvAllocateTCBAndStack+0x3c>
800028b0:	fde45783          	lhu	a5,-34(s0)
800028b4:	00279793          	slli	a5,a5,0x2
800028b8:	00078513          	mv	a0,a5
800028bc:	84dfe0ef          	jal	ra,80001108 <pvPortMalloc>
800028c0:	00050793          	mv	a5,a0
800028c4:	0080006f          	j	800028cc <prvAllocateTCBAndStack+0x40>
800028c8:	fd842783          	lw	a5,-40(s0)
800028cc:	fef42423          	sw	a5,-24(s0)
800028d0:	fe842783          	lw	a5,-24(s0)
800028d4:	02078a63          	beqz	a5,80002908 <prvAllocateTCBAndStack+0x7c>
800028d8:	06000513          	li	a0,96
800028dc:	82dfe0ef          	jal	ra,80001108 <pvPortMalloc>
800028e0:	fea42623          	sw	a0,-20(s0)
800028e4:	fec42783          	lw	a5,-20(s0)
800028e8:	00078a63          	beqz	a5,800028fc <prvAllocateTCBAndStack+0x70>
800028ec:	fec42783          	lw	a5,-20(s0)
800028f0:	fe842703          	lw	a4,-24(s0)
800028f4:	02e7a823          	sw	a4,48(a5)
800028f8:	0140006f          	j	8000290c <prvAllocateTCBAndStack+0x80>
800028fc:	fe842503          	lw	a0,-24(s0)
80002900:	9edfe0ef          	jal	ra,800012ec <vPortFree>
80002904:	0080006f          	j	8000290c <prvAllocateTCBAndStack+0x80>
80002908:	fe042623          	sw	zero,-20(s0)
8000290c:	fec42783          	lw	a5,-20(s0)
80002910:	02078263          	beqz	a5,80002934 <prvAllocateTCBAndStack+0xa8>
80002914:	fec42783          	lw	a5,-20(s0)
80002918:	0307a703          	lw	a4,48(a5)
8000291c:	fde45783          	lhu	a5,-34(s0)
80002920:	00279793          	slli	a5,a5,0x2
80002924:	00078613          	mv	a2,a5
80002928:	0a500593          	li	a1,165
8000292c:	00070513          	mv	a0,a4
80002930:	b08ff0ef          	jal	ra,80001c38 <memset>
80002934:	fec42783          	lw	a5,-20(s0)
80002938:	00078513          	mv	a0,a5
8000293c:	02c12083          	lw	ra,44(sp)
80002940:	02812403          	lw	s0,40(sp)
80002944:	03010113          	addi	sp,sp,48
80002948:	00008067          	ret
8000294c:	0000                	unimp
	...

80002950 <prvDeleteTCB>:
prvDeleteTCB():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002950:	fe010113          	addi	sp,sp,-32
80002954:	00112e23          	sw	ra,28(sp)
80002958:	00812c23          	sw	s0,24(sp)
8000295c:	02010413          	addi	s0,sp,32
80002960:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002964:	fec42783          	lw	a5,-20(s0)
80002968:	0307a783          	lw	a5,48(a5)
8000296c:	00078513          	mv	a0,a5
80002970:	97dfe0ef          	jal	ra,800012ec <vPortFree>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002974:	fec42503          	lw	a0,-20(s0)
80002978:	975fe0ef          	jal	ra,800012ec <vPortFree>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
8000297c:	00000013          	nop
80002980:	01c12083          	lw	ra,28(sp)
80002984:	01812403          	lw	s0,24(sp)
80002988:	02010113          	addi	sp,sp,32
8000298c:	00008067          	ret
80002990:	0000                	unimp
	...

80002994 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002994:	fe010113          	addi	sp,sp,-32
80002998:	00812e23          	sw	s0,28(sp)
8000299c:	02010413          	addi	s0,sp,32
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800029a0:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
800029a4:	0007a783          	lw	a5,0(a5)
800029a8:	00079663          	bnez	a5,800029b4 <prvResetNextTaskUnblockTime+0x20>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
800029ac:	00100793          	li	a5,1
800029b0:	0080006f          	j	800029b8 <prvResetNextTaskUnblockTime+0x24>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
800029b4:	00000793          	li	a5,0
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
800029b8:	00078863          	beqz	a5,800029c8 <prvResetNextTaskUnblockTime+0x34>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
800029bc:	fff00713          	li	a4,-1
800029c0:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
800029c4:	0200006f          	j	800029e4 <prvResetNextTaskUnblockTime+0x50>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800029c8:	9301a783          	lw	a5,-1744(gp) # 80002f00 <pxDelayedTaskList>
800029cc:	00c7a783          	lw	a5,12(a5)
800029d0:	00c7a783          	lw	a5,12(a5)
800029d4:	fef42623          	sw	a5,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
800029d8:	fec42783          	lw	a5,-20(s0)
800029dc:	0047a703          	lw	a4,4(a5)
800029e0:	94e1ae23          	sw	a4,-1700(gp) # 80002f2c <xNextTaskUnblockTime>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
800029e4:	00000013          	nop
800029e8:	01c12403          	lw	s0,28(sp)
800029ec:	02010113          	addi	sp,sp,32
800029f0:	00008067          	ret
800029f4:	0000                	unimp
	...

800029f8 <PLIC_init>:
PLIC_init():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:109 (discriminator 1)

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
800029f8:	fe010113          	addi	sp,sp,-32
800029fc:	00812e23          	sw	s0,28(sp)
80002a00:	02010413          	addi	s0,sp,32
80002a04:	f14027f3          	csrr	a5,mhartid
80002a08:	fef42423          	sw	a5,-24(s0)
80002a0c:	fe842783          	lw	a5,-24(s0)
80002a10:	fef42223          	sw	a5,-28(s0)
80002a14:	fe042623          	sw	zero,-20(s0)
80002a18:	03c0006f          	j	80002a54 <PLIC_init+0x5c>
80002a1c:	40000737          	lui	a4,0x40000
80002a20:	fe442783          	lw	a5,-28(s0)
80002a24:	00579693          	slli	a3,a5,0x5
80002a28:	fec42783          	lw	a5,-20(s0)
80002a2c:	00f686b3          	add	a3,a3,a5
80002a30:	000017b7          	lui	a5,0x1
80002a34:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002a38:	00f687b3          	add	a5,a3,a5
80002a3c:	00279793          	slli	a5,a5,0x2
80002a40:	00f707b3          	add	a5,a4,a5
80002a44:	0007a023          	sw	zero,0(a5)
80002a48:	fec42783          	lw	a5,-20(s0)
80002a4c:	00178793          	addi	a5,a5,1
80002a50:	fef42623          	sw	a5,-20(s0)
80002a54:	fec42783          	lw	a5,-20(s0)
80002a58:	fc0782e3          	beqz	a5,80002a1c <PLIC_init+0x24>
80002a5c:	fe042623          	sw	zero,-20(s0)
80002a60:	0240006f          	j	80002a84 <PLIC_init+0x8c>
80002a64:	40000737          	lui	a4,0x40000
80002a68:	fec42783          	lw	a5,-20(s0)
80002a6c:	00279793          	slli	a5,a5,0x2
80002a70:	00f707b3          	add	a5,a4,a5
80002a74:	0007a023          	sw	zero,0(a5)
80002a78:	fec42783          	lw	a5,-20(s0)
80002a7c:	00178793          	addi	a5,a5,1
80002a80:	fef42623          	sw	a5,-20(s0)
80002a84:	fec42703          	lw	a4,-20(s0)
80002a88:	01e00793          	li	a5,30
80002a8c:	fce7fce3          	bleu	a4,a5,80002a64 <PLIC_init+0x6c>
80002a90:	40000737          	lui	a4,0x40000
80002a94:	fe442783          	lw	a5,-28(s0)
80002a98:	20078793          	addi	a5,a5,512
80002a9c:	00c79793          	slli	a5,a5,0xc
80002aa0:	00f707b3          	add	a5,a4,a5
80002aa4:	0007a023          	sw	zero,0(a5)
80002aa8:	000017b7          	lui	a5,0x1
80002aac:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002ab0:	3047a7f3          	csrrs	a5,mie,a5
80002ab4:	fef42023          	sw	a5,-32(s0)
80002ab8:	00000013          	nop
80002abc:	01c12403          	lw	s0,28(sp)
80002ac0:	02010113          	addi	sp,sp,32
80002ac4:	00008067          	ret
80002ac8:	0000                	unimp
	...

80002acc <main>:
main():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:109 (discriminator 1)
80002acc:	ff010113          	addi	sp,sp,-16
80002ad0:	00112623          	sw	ra,12(sp)
80002ad4:	00812423          	sw	s0,8(sp)
80002ad8:	01010413          	addi	s0,sp,16
80002adc:	f1dff0ef          	jal	ra,800029f8 <PLIC_init>
80002ae0:	00100693          	li	a3,1
80002ae4:	02c00613          	li	a2,44
80002ae8:	700015b7          	lui	a1,0x70001
80002aec:	8001c7b7          	lui	a5,0x8001c
80002af0:	00c78513          	addi	a0,a5,12 # 8001c00c <__stack_top+0xfffdffec>
80002af4:	b8cfe0ef          	jal	ra,80000e80 <UART_init>
80002af8:	800037b7          	lui	a5,0x80003
80002afc:	d1878593          	addi	a1,a5,-744 # 80002d18 <__stack_top+0xfffc6cf8>
80002b00:	8001c7b7          	lui	a5,0x8001c
80002b04:	00c78513          	addi	a0,a5,12 # 8001c00c <__stack_top+0xfffdffec>
80002b08:	d4cfe0ef          	jal	ra,80001054 <UART_polled_tx_string>
80002b0c:	800037b7          	lui	a5,0x80003
80002b10:	d5c78593          	addi	a1,a5,-676 # 80002d5c <__stack_top+0xfffc6d3c>
80002b14:	8001c7b7          	lui	a5,0x8001c
80002b18:	00c78513          	addi	a0,a5,12 # 8001c00c <__stack_top+0xfffdffec>
80002b1c:	d38fe0ef          	jal	ra,80001054 <UART_polled_tx_string>
80002b20:	00000893          	li	a7,0
80002b24:	00000813          	li	a6,0
80002b28:	00000793          	li	a5,0
80002b2c:	00200713          	li	a4,2
80002b30:	00000693          	li	a3,0
80002b34:	3e800613          	li	a2,1000
80002b38:	800035b7          	lui	a1,0x80003
80002b3c:	da458593          	addi	a1,a1,-604 # 80002da4 <__stack_top+0xfffc6d84>
80002b40:	80003537          	lui	a0,0x80003
80002b44:	bd050513          	addi	a0,a0,-1072 # 80002bd0 <__stack_top+0xfffc6bb0>
80002b48:	a30ff0ef          	jal	ra,80001d78 <xTaskGenericCreate>
80002b4c:	00000893          	li	a7,0
80002b50:	00000813          	li	a6,0
80002b54:	00000793          	li	a5,0
80002b58:	00200713          	li	a4,2
80002b5c:	00000693          	li	a3,0
80002b60:	3e800613          	li	a2,1000
80002b64:	800035b7          	lui	a1,0x80003
80002b68:	dac58593          	addi	a1,a1,-596 # 80002dac <__stack_top+0xfffc6d8c>
80002b6c:	80003537          	lui	a0,0x80003
80002b70:	c0850513          	addi	a0,a0,-1016 # 80002c08 <__stack_top+0xfffc6be8>
80002b74:	a04ff0ef          	jal	ra,80001d78 <xTaskGenericCreate>
80002b78:	ca8ff0ef          	jal	ra,80002020 <vTaskStartScheduler>
80002b7c:	00000793          	li	a5,0
80002b80:	00078513          	mv	a0,a5
80002b84:	00c12083          	lw	ra,12(sp)
80002b88:	00812403          	lw	s0,8(sp)
80002b8c:	01010113          	addi	sp,sp,16
80002b90:	00008067          	ret
80002b94:	0000                	unimp
	...

80002b98 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:109 (discriminator 1)
80002b98:	ff010113          	addi	sp,sp,-16
80002b9c:	00812623          	sw	s0,12(sp)
80002ba0:	01010413          	addi	s0,sp,16
80002ba4:	30047073          	csrci	mstatus,8
80002ba8:	0000006f          	j	80002ba8 <vApplicationMallocFailedHook+0x10>
80002bac:	0000                	unimp
	...

80002bb0 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:109 (discriminator 1)
80002bb0:	ff010113          	addi	sp,sp,-16
80002bb4:	00812623          	sw	s0,12(sp)
80002bb8:	01010413          	addi	s0,sp,16
80002bbc:	00000013          	nop
80002bc0:	00c12403          	lw	s0,12(sp)
80002bc4:	01010113          	addi	sp,sp,16
80002bc8:	00008067          	ret
80002bcc:	0000                	unimp
	...

80002bd0 <vUartTestTask1>:
vUartTestTask1():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:114
}
/*-----------------------------------------------------------*/

static void vUartTestTask1( void *pvParameters )
{
80002bd0:	fe010113          	addi	sp,sp,-32
80002bd4:	00112e23          	sw	ra,28(sp)
80002bd8:	00812c23          	sw	s0,24(sp)
80002bdc:	02010413          	addi	s0,sp,32
80002be0:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:119 (discriminator 1)
	( void ) pvParameters;

	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80002be4:	800037b7          	lui	a5,0x80003
80002be8:	db478593          	addi	a1,a5,-588 # 80002db4 <__stack_top+0xfffc6d94>
80002bec:	8001c7b7          	lui	a5,0x8001c
80002bf0:	00c78513          	addi	a0,a5,12 # 8001c00c <__stack_top+0xfffdffec>
80002bf4:	c60fe0ef          	jal	ra,80001054 <UART_polled_tx_string>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:120 (discriminator 1)
	    vTaskDelay(10);
80002bf8:	00a00513          	li	a0,10
80002bfc:	b9cff0ef          	jal	ra,80001f98 <vTaskDelay>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:119 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80002c00:	fe5ff06f          	j	80002be4 <vUartTestTask1+0x14>
80002c04:	0000                	unimp
	...

80002c08 <vUartTestTask2>:
vUartTestTask2():
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:128


/*-----------------------------------------------------------*/

static void vUartTestTask2( void *pvParameters )
{
80002c08:	fe010113          	addi	sp,sp,-32
80002c0c:	00112e23          	sw	ra,28(sp)
80002c10:	00812c23          	sw	s0,24(sp)
80002c14:	02010413          	addi	s0,sp,32
80002c18:	fea42623          	sw	a0,-20(s0)
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:133 (discriminator 1)
	( void ) pvParameters;

	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80002c1c:	800037b7          	lui	a5,0x80003
80002c20:	dc078593          	addi	a1,a5,-576 # 80002dc0 <__stack_top+0xfffc6da0>
80002c24:	8001c7b7          	lui	a5,0x8001c
80002c28:	00c78513          	addi	a0,a5,12 # 8001c00c <__stack_top+0xfffdffec>
80002c2c:	c28fe0ef          	jal	ra,80001054 <UART_polled_tx_string>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:134 (discriminator 1)
	    vTaskDelay(5);
80002c30:	00500513          	li	a0,5
80002c34:	b64ff0ef          	jal	ra,80001f98 <vTaskDelay>
/home/release/build/20210408.0/Imperas/Demo/Platforms/riscv_RV32IM_FreeRTOS/FreeRTOS/Debug/../main.c:133 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80002c38:	fe5ff06f          	j	80002c1c <vUartTestTask2+0x14>
80002c3c:	0000                	unimp
	...

80002c40 <write>:
write():
80002c40:	00000797          	auipc	a5,0x0
80002c44:	1a078793          	addi	a5,a5,416 # 80002de0 <_impure_ptr>
80002c48:	00060693          	mv	a3,a2
80002c4c:	00058613          	mv	a2,a1
80002c50:	00050593          	mv	a1,a0
80002c54:	0007a503          	lw	a0,0(a5)
80002c58:	0080006f          	j	80002c60 <_write_r>
80002c5c:	0000                	unimp
	...

80002c60 <_write_r>:
_write_r():
80002c60:	ff010113          	addi	sp,sp,-16
80002c64:	00812423          	sw	s0,8(sp)
80002c68:	00050413          	mv	s0,a0
80002c6c:	00058513          	mv	a0,a1
80002c70:	00060593          	mv	a1,a2
80002c74:	00068613          	mv	a2,a3
80002c78:	00019797          	auipc	a5,0x19
80002c7c:	3807a823          	sw	zero,912(a5) # 8001c008 <errno>
80002c80:	00112623          	sw	ra,12(sp)
80002c84:	838fe0ef          	jal	ra,80000cbc <_write>
80002c88:	fff00793          	li	a5,-1
80002c8c:	00f51c63          	bne	a0,a5,80002ca4 <_write_r+0x44>
80002c90:	00019797          	auipc	a5,0x19
80002c94:	37878793          	addi	a5,a5,888 # 8001c008 <errno>
80002c98:	0007a783          	lw	a5,0(a5)
80002c9c:	00078463          	beqz	a5,80002ca4 <_write_r+0x44>
80002ca0:	00f42023          	sw	a5,0(s0)
80002ca4:	00c12083          	lw	ra,12(sp)
80002ca8:	00812403          	lw	s0,8(sp)
80002cac:	01010113          	addi	sp,sp,16
80002cb0:	00008067          	ret
	...
80002cc0:	6568                	flw	fa0,76(a0)
80002cc2:	6c6c                	flw	fa1,92(s0)
80002cc4:	0000006f          	j	80002cc4 <_write_r+0x64>
80002cc8:	7274                	flw	fa3,100(a2)
80002cca:	7061                	0x7061
80002ccc:	000a                	0xa
80002cce:	0000                	unimp
80002cd0:	7830                	flw	fa2,112(s0)
80002cd2:	0000                	unimp
80002cd4:	500a                	0x500a
80002cd6:	6f72                	flw	ft10,28(sp)
80002cd8:	206d6167          	0x206d6167
80002cdc:	6168                	flw	fa0,68(a0)
80002cde:	78652073          	csrs	0x786,a0
80002ce2:	7469                	lui	s0,0xffffa
80002ce4:	6465                	lui	s0,0x19
80002ce6:	7720                	flw	fs0,104(a4)
80002ce8:	7469                	lui	s0,0xffffa
80002cea:	2068                	fld	fa0,192(s0)
80002cec:	65646f63          	bltu	s0,s6,8000334a <__sbss_end+0x40a>
80002cf0:	003a                	0x3a
80002cf2:	0000                	unimp
80002cf4:	000d                	c.addi	zero,3
80002cf6:	0000                	unimp
80002cf8:	4449                	li	s0,18
80002cfa:	454c                	lw	a1,12(a0)
80002cfc:	0000                	unimp
80002cfe:	0000                	unimp
80002d00:	0a0d                	addi	s4,s4,3
80002d02:	7246                	flw	ft4,112(sp)
80002d04:	6565                	lui	a0,0x19
80002d06:	5452                	lw	s0,52(sp)
80002d08:	4520534f          	0x4520534f
80002d0c:	6178                	flw	fa4,68(a0)
80002d0e:	706d                	0x706d
80002d10:	656c                	flw	fa1,76(a0)
80002d12:	0a0d                	addi	s4,s4,3
80002d14:	0000                	unimp
80002d16:	0000                	unimp
80002d18:	0a0d                	addi	s4,s4,3
80002d1a:	0a0d                	addi	s4,s4,3
80002d1c:	0909                	addi	s2,s2,2
80002d1e:	706d6153          	0x706d6153
80002d22:	656c                	flw	fa1,76(a0)
80002d24:	4420                	lw	s0,72(s0)
80002d26:	6d65                	lui	s10,0x19
80002d28:	74736e6f          	jal	t3,80039c6e <__heap_end+0xdc4e>
80002d2c:	6172                	flw	ft2,28(sp)
80002d2e:	6974                	flw	fa3,84(a0)
80002d30:	6f206e6f          	jal	t3,80009422 <__global_pointer$+0x5e52>
80002d34:	2066                	fld	ft0,88(sp)
80002d36:	7246                	flw	ft4,112(sp)
80002d38:	6565                	lui	a0,0x19
80002d3a:	5452                	lw	s0,52(sp)
80002d3c:	7020534f          	fnmadd.s	ft6,ft0,ft2,fa4,unknown
80002d40:	2074726f          	jal	tp,8004a746 <__stack_top+0xe726>
80002d44:	6f66                	flw	ft10,88(sp)
80002d46:	2072                	fld	ft0,280(sp)
80002d48:	694d                	lui	s2,0x13
80002d4a:	562d                	li	a2,-21
80002d4c:	7020                	flw	fs0,96(s0)
80002d4e:	6f72                	flw	ft10,28(sp)
80002d50:	73736563          	bltu	t1,s7,8000347a <__sbss_end+0x53a>
80002d54:	0d2e726f          	jal	tp,800e9e26 <__stack_top+0xade06>
80002d58:	0d0a                	slli	s10,s10,0x2
80002d5a:	000a                	0xa
80002d5c:	0909                	addi	s2,s2,2
80002d5e:	6854                	flw	fa3,20(s0)
80002d60:	7369                	lui	t1,0xffffa
80002d62:	7020                	flw	fs0,96(s0)
80002d64:	6f72                	flw	ft10,28(sp)
80002d66:	656a                	flw	fa0,152(sp)
80002d68:	63207463          	bleu	s2,zero,80003390 <__sbss_end+0x450>
80002d6c:	6572                	flw	fa0,28(sp)
80002d6e:	7461                	lui	s0,0xffff8
80002d70:	7365                	lui	t1,0xffff9
80002d72:	2020                	fld	fs0,64(s0)
80002d74:	7774                	flw	fa3,108(a4)
80002d76:	6174206f          	j	80045b8c <__stack_top+0x9b6c>
80002d7a:	20736b73          	csrrsi	s6,0x207,6
80002d7e:	6e61                	lui	t3,0x18
80002d80:	2064                	fld	fs1,192(s0)
80002d82:	7572                	flw	fa0,60(sp)
80002d84:	736e                	flw	ft6,248(sp)
80002d86:	7420                	flw	fs0,104(s0)
80002d88:	6568                	flw	fa0,76(a0)
80002d8a:	206d                	jal	80002e34 <__data_load+0x44>
80002d8c:	7461                	lui	s0,0xffff8
80002d8e:	7220                	flw	fs0,96(a2)
80002d90:	6765                	lui	a4,0x19
80002d92:	6c75                	lui	s8,0x1d
80002d94:	7261                	lui	tp,0xffff8
80002d96:	6920                	flw	fs0,80(a0)
80002d98:	746e                	flw	fs0,248(sp)
80002d9a:	7265                	lui	tp,0xffff9
80002d9c:	6176                	flw	ft2,92(sp)
80002d9e:	736c                	flw	fa1,100(a4)
80002da0:	0d2e                	slli	s10,s10,0xb
80002da2:	000a                	0xa
80002da4:	4155                	li	sp,21
80002da6:	7472                	flw	fs0,60(sp)
80002da8:	0031                	c.addi	zero,12
80002daa:	0000                	unimp
80002dac:	4155                	li	sp,21
80002dae:	7472                	flw	fs0,60(sp)
80002db0:	0032                	0x32
80002db2:	0000                	unimp
80002db4:	6154                	flw	fa3,4(a0)
80002db6:	2d206b73          	csrrsi	s6,0x2d2,0
80002dba:	3120                	fld	fs0,96(a0)
80002dbc:	0a0d                	addi	s4,s4,3
80002dbe:	0000                	unimp
80002dc0:	6154                	flw	fa3,4(a0)
80002dc2:	2d206b73          	csrrsi	s6,0x2d2,0
80002dc6:	3220                	fld	fs0,96(a2)
80002dc8:	0a0d                	addi	s4,s4,3
80002dca:	0000                	unimp
80002dcc:	0000                	unimp
	...
