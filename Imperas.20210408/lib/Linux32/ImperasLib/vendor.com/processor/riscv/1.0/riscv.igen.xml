<?xml version="1.0" encoding="UTF-8"?>

 <processor QLQualified="T"
    defaultsemihostlibrary="semihosting"
    defaultsemihostname="pk"
    defaultsemihostvendor="riscv.ovpworld.org"
    defaultsemihostversion="1.0"
    elfcode="243"
    endian="either"
    family="Vendor"
    gdbpath="$IMPERAS_HOME/lib/$IMPERAS_ARCH/gdb/riscv-none-embed-gdb"
    imagefile="model"
    library="processor"
    name="riscv"
    procdoc="$IMPERAS_HOME/ImperasLib/source/vendor.com/processor/riscv/1.0/doc/OVP_Model_Specific_Information_riscv_generic.pdf"
    releasestatus="4"
    useindefaultplatform="F"
    vendor="vendor.com"
    version="1.0"
    visibility="0">
    <docsection name="doc"
        text="Description">
        <doctext name="txt"
            text="RISC-V RV32X 32-bit processor model"/>
    </docsection>
    <docsection name="doc_1"
        text="Licensing">
        <doctext name="txt"
            text="This Model is released under the Open Source Apache 2.0"/>
    </docsection>
    <docsection name="doc_2"
        text="Extensions Enabled by Default">
        <doctext name="txt"
            text="The model has the following architectural extensions enabled, and the following bits in the misa CSR Extensions field will be set upon reset:"/>
        <doctext name="txt_1"
            text="misa bit 0: extension A (atomic instructions)"/>
        <doctext name="txt_2"
            text="misa bit 2: extension C (compressed instructions)"/>
        <doctext name="txt_3"
            text="misa bit 3: extension D (double-precision floating point)"/>
        <doctext name="txt_4"
            text="misa bit 5: extension F (single-precision floating point)"/>
        <doctext name="txt_5"
            text="misa bit 8: RV32I/RV64I/RV128I base integer instruction set"/>
        <doctext name="txt_6"
            text="misa bit 12: extension M (integer multiply/divide instructions)"/>
        <doctext name="txt_7"
            text="misa bit 20: extension U (User mode)"/>
        <doctext name="txt_8"
            text="misa bit 23: extension X (non-standard extensions present)"/>
        <doctext name="txt_9"
            text="To specify features that can be dynamically enabled or disabled by writes to the misa register in addition to those listed above, use parameter &quot;add_Extensions_mask&quot;. This is a string parameter containing the feature letters to add; for example, value &quot;DV&quot; indicates that double-precision floating point and the Vector Extension can be enabled or disabled by writes to the misa register, if supported on this variant."/>
        <doctext name="txt_10"
            text="Legacy parameter &quot;misa_Extensions_mask&quot; can also be used. This Uns32-valued parameter specifies all writable bits in the misa Extensions field, replacing any permitted bits defined in the base variant."/>
        <doctext name="txt_11"
            text="Note that any features that are indicated as present in the misa mask but absent in the misa will be ignored. See the next section."/>
    </docsection>
    <docsection name="doc_3"
        text="Available Extensions Not Enabled by Default">
        <doctext name="txt"
            text="The following extensions are supported by the model, but not enabled by default in this variant:"/>
        <doctext name="txt_1"
            text="misa bit 1: extension B (bit manipulation extension)"/>
        <doctext name="txt_2"
            text="misa bit 4: RV32E base integer instruction set (embedded)"/>
        <doctext name="txt_3"
            text="misa bit 7: extension H (hypervisor)"/>
        <doctext name="txt_4"
            text="misa bit 10: extension K (cryptographic)"/>
        <doctext name="txt_5"
            text="misa bit 13: extension N (user-level interrupts)"/>
        <doctext name="txt_6"
            text="misa bit 18: extension S (Supervisor mode)"/>
        <doctext name="txt_7"
            text="misa bit 21: extension V (vector extension)"/>
        <doctext name="txt_8"
            text="To add features from this list to the base variant, use parameter &quot;add_Extensions&quot;. This is a string parameter containing the feature letters to add; for example, value &quot;DV&quot; indicates that double-precision floating point and the Vector Extension should be enabled, if they are currently absent and are available on this variant."/>
        <doctext name="txt_9"
            text="Legacy parameter &quot;misa_Extensions&quot; can also be used. This Uns32-valued parameter specifies the reset value for the misa CSR Extensions field, replacing any permitted bits defined in the base variant."/>
    </docsection>
    <docsection name="doc_4"
        text="General Features">
        <doctext name="txt"
            text="On this variant, the Machine trap-vector base-address register (mtvec) is writable. It can instead be configured as read-only using parameter &quot;mtvec_is_ro&quot;."/>
        <doctext name="txt_1"
            text="Values written to &quot;mtvec&quot; are masked using the value 0xfffffffd. A different mask of writable bits may be specified using parameter &quot;mtvec_mask&quot; if required. In addition, when Vectored interrupt mode is enabled, parameter &quot;tvec_align&quot; may be used to specify additional hardware-enforced base address alignment. In this variant, &quot;tvec_align&quot; defaults to 0, implying no alignment constraint."/>
        <doctext name="txt_2"
            text="The initial value of &quot;mtvec&quot; is 0x0. A different value may be specified using parameter &quot;mtvec&quot; if required."/>
        <doctext name="txt_3"
            text="On reset, the model will restart at address 0x0. A different reset address may be specified using parameter &quot;reset_address&quot; or applied using optional input port &quot;reset_addr&quot; if required."/>
        <doctext name="txt_4"
            text="On an NMI, the model will restart at address 0x0. A different NMI address may be specified using parameter &quot;nmi_address&quot; or applied using optional input port &quot;nmi_addr&quot; if required."/>
        <doctext name="txt_5"
            text="WFI will halt the processor until an interrupt occurs. It can instead be configured as a NOP using parameter &quot;wfi_is_nop&quot;. WFI timeout wait is implemented with a time limit of 0 (i.e. WFI causes an Illegal Instruction trap in Supervisor mode when mstatus.TW=1)."/>
        <doctext name="txt_6"
            text="The &quot;cycle&quot; CSR is implemented in this variant. Set parameter &quot;cycle_undefined&quot; to True to instead specify that &quot;cycle&quot; is unimplemented and reads of it should trap to Machine mode."/>
        <doctext name="txt_7"
            text="The &quot;time&quot; CSR is implemented in this variant. Set parameter &quot;time_undefined&quot; to True to instead specify that &quot;time&quot; is unimplemented and reads of it should trap to Machine mode. Usually, the value of the &quot;time&quot; CSR should be provided by the platform - see notes below about the artifact &quot;CSR&quot; bus for information about how this is done."/>
        <doctext name="txt_8"
            text="The &quot;instret&quot; CSR is implemented in this variant. Set parameter &quot;instret_undefined&quot; to True to instead specify that &quot;instret&quot; is unimplemented and reads of it should trap to Machine mode."/>
        <doctext name="txt_9"
            text="Unaligned memory accesses are not supported by this variant. Set parameter &quot;unaligned&quot; to &quot;T&quot; to enable such accesses."/>
        <doctext name="txt_10"
            text="Unaligned memory accesses are not supported for AMO instructions by this variant. Set parameter &quot;unalignedAMO&quot; to &quot;T&quot; to enable such accesses."/>
        <doctext name="txt_11"
            text="A PMP unit is not implemented by this variant. Set parameter &quot;PMP_registers&quot; to indicate that the unit should be implemented with that number of PMP entries."/>
        <doctext name="txt_12"
            text="LR/SC instructions are implemented with a 1-byte reservation granule. A different granule size may be specified using parameter &quot;lr_sc_grain&quot;."/>
    </docsection>
    <docsection name="doc_5"
        text="Floating Point Features">
        <doctext name="txt"
            text="Half precision floating point is not implemented. Use parameter &quot;Zfh&quot; to enable this if required."/>
        <doctext name="txt_1"
            text="By default, the processor starts with floating-point instructions disabled (mstatus.FS=0). Use parameter &quot;mstatus_FS&quot; to force mstatus.FS to a non-zero value for floating-point to be enabled from the start."/>
        <doctext name="txt_2"
            text="The specification is imprecise regarding the conditions under which mstatus.FS is set to Dirty state (3). Parameter &quot;mstatus_fs_mode&quot; can be used to specify the required behavior in this model, as described below."/>
        <doctext name="txt_3"
            text="If &quot;mstatus_fs_mode&quot; is set to &quot;always_dirty&quot; then the model implements a simplified floating point status view in which mstatus.FS holds values 0 (Off) and 3 (Dirty) only; any write of values 1 (Initial) or 2 (Clean) from privileged code behave as if value 3 was written."/>
        <doctext name="txt_4"
            text="If &quot;mstatus_fs_mode&quot; is set to &quot;write_1&quot; then mstatus.FS will be set to 3 (Dirty) by any explicit write to the fflags, frm or fcsr control registers, or by any executed instruction that writes an FPR, or by any executed floating point compare or conversion to integer/unsigned that signals a floating point exception. Floating point compare or conversion to integer/unsigned instructions that do not signal an exception will not set mstatus.FS."/>
        <doctext name="txt_5"
            text="If &quot;mstatus_fs_mode&quot; is set to &quot;write_any&quot; then mstatus.FS will be set to 3 (Dirty) by any explicit write to the fflags, frm or fcsr control registers, or by any executed instruction that writes an FPR, or by any executed floating point compare or conversion even if those instructions do not signal a floating point exception."/>
        <doctext name="txt_6"
            text="In this variant, &quot;mstatus_fs_mode&quot; is set to &quot;write_1&quot;."/>
    </docsection>
    <docsection name="doc_6"
        text="CLIC">
        <doctext name="txt"
            text="The model can be configured to implement a Core Local Interrupt Controller (CLIC) using parameter &quot;CLICLEVELS&quot;; when non-zero, the CLIC is present with the specified number of interrupt levels (2-256), as described in the RISC-V Core-Local Interrupt Controller specification, and further parameters are made available to configure other aspects of the CLIC. &quot;CLICLEVELS&quot; is zero in this variant, indicating that a CLIC is not implemented."/>
    </docsection>
    <docsection name="doc_7"
        text="Load-Reserved/Store-Conditional Locking">
        <doctext name="txt"
            text="By default, LR/SC locking is implemented automatically by the model and simulator, with a reservation granule defined by the &quot;lr_sc_grain&quot; parameter. It is also possible to implement locking externally to the model in a platform component, using the &quot;LR_address&quot;, &quot;SC_address&quot; and &quot;SC_valid&quot; net ports, as described below."/>
        <doctext name="txt_1"
            text="The &quot;LR_address&quot; output net port is written by the model with the address used by a load-reserved instruction as it executes. This port should be connected as an input to the external lock management component, which should record the address, and also that an LR/SC transaction is active."/>
        <doctext name="txt_2"
            text="The &quot;SC_address&quot; output net port is written by the model with the address used by a store-conditional instruction as it executes. This should be connected as an input to the external lock management component, which should compare the address with the previously-recorded load-reserved address, and determine from this (and other implementation-specific constraints) whether the store should succeed. It should then immediately write the Boolean success/fail code to the &quot;SC_valid&quot; input net port of the model. Finally, it should update state to indicate that an LR/SC transaction is no longer active."/>
        <doctext name="txt_3"
            text="It is also possible to write zero to the &quot;SC_valid&quot; input net port at any time outside the context of a store-conditional instruction, which will mark any active LR/SC transaction as invalid."/>
        <doctext name="txt_4"
            text="Irrespective of whether LR/SC locking is implemented internally or externally, taking any exception or interrupt or executing exception-return instructions (e.g. MRET) will always mark any active LR/SC transaction as invalid."/>
    </docsection>
    <docsection name="doc_8"
        text="Active Atomic Operation Indication">
        <doctext name="txt"
            text="The &quot;AMO_active&quot; output net port is written by the model with a code indicating any current atomic memory operation while the instruction is active. The written codes are:"/>
        <doctext name="txt_1"
            text="0: no atomic instruction active"/>
        <doctext name="txt_2"
            text="1: AMOMIN active"/>
        <doctext name="txt_3"
            text="2: AMOMAX active"/>
        <doctext name="txt_4"
            text="3: AMOMINU active"/>
        <doctext name="txt_5"
            text="4: AMOMAXU active"/>
        <doctext name="txt_6"
            text="5: AMOADD active"/>
        <doctext name="txt_7"
            text="6: AMOXOR active"/>
        <doctext name="txt_8"
            text="7: AMOOR active"/>
        <doctext name="txt_9"
            text="8: AMOAND active"/>
        <doctext name="txt_10"
            text="9: AMOSWAP active"/>
        <doctext name="txt_11"
            text="10: LR active"/>
        <doctext name="txt_12"
            text="11: SC active"/>
    </docsection>
    <docsection name="doc_9"
        text="Interrupts">
        <doctext name="txt"
            text="The &quot;reset&quot; port is an active-high reset input. The processor is halted when &quot;reset&quot; goes high and resumes execution from the reset address specified using the &quot;reset_address&quot; parameter or &quot;reset_addr&quot; port when the signal goes low. The &quot;mcause&quot; register is cleared to zero."/>
        <doctext name="txt_1"
            text="The &quot;nmi&quot; port is an active-high NMI input. The processor resumes execution from the address specified using the &quot;nmi_address&quot; parameter or &quot;nmi_addr&quot; port when the NMI signal goes high. The &quot;mcause&quot; register is cleared to zero."/>
        <doctext name="txt_2"
            text="All other interrupt ports are active high. For each implemented privileged execution level, there are by default input ports for software interrupt, timer interrupt and external interrupt; for example, for Machine mode, these are called &quot;MSWInterrupt&quot;, &quot;MTimerInterrupt&quot; and &quot;MExternalInterrupt&quot;, respectively. When the N extension is implemented, ports are also present for User mode. Parameter &quot;unimp_int_mask&quot; allows the default behavior to be changed to exclude certain interrupt ports. The parameter value is a mask in the same format as the &quot;mip&quot; CSR; any interrupt corresponding to a non-zero bit in this mask will be removed from the processor and read as zero in &quot;mip&quot;, &quot;mie&quot; and &quot;mideleg&quot; CSRs (and Supervisor and User mode equivalents if implemented)."/>
        <doctext name="txt_3"
            text="Parameter &quot;external_int_id&quot; can be used to enable extra interrupt ID input ports on each hart. If the parameter is True then when an external interrupt is applied the value on the ID port is sampled and used to fill the Exception Code field in the &quot;mcause&quot; CSR (or the equivalent CSR for other execution levels). For Machine mode, the extra interrupt ID port is called &quot;MExternalInterruptID&quot;."/>
        <doctext name="txt_4"
            text="The &quot;deferint&quot; port is an active-high artifact input that, when written to 1, prevents any pending-and-enabled interrupt being taken (normally, such an interrupt would be taken on the next instruction after it becomes pending-and-enabled). The purpose of this signal is to enable alignment with hardware models in step-and-compare usage."/>
    </docsection>
    <docsection name="doc_10"
        text="Debug Mode">
        <doctext name="txt"
            text="The model can be configured to implement Debug mode using parameter &quot;debug_mode&quot;. This implements features described in Chapter 4 of the RISC-V External Debug Support specification with version specified by parameter &quot;debug_version&quot; (see References). Some aspects of this mode are not defined in the specification because they are implementation-specific; the model provides infrastructure to allow implementation of a Debug Module using a custom harness. Features added are described below."/>
        <doctext name="txt_1"
            text="Parameter &quot;debug_mode&quot; can be used to specify three different behaviors, as follows:"/>
        <doctext name="txt_2"
            text="1. If set to value &quot;vector&quot;, then operations that would cause entry to Debug mode result in the processor jumping to the address specified by the &quot;debug_address&quot; parameter. It will execute at this address, in Debug mode, until a &quot;dret&quot; instruction causes return to non-Debug mode. Any exception generated during this execution will cause a jump to the address specified by the &quot;dexc_address&quot; parameter."/>
        <doctext name="txt_3"
            text="2. If set to value &quot;interrupt&quot;, then operations that would cause entry to Debug mode result in the processor simulation call (e.g. opProcessorSimulate) returning, with a stop reason of OP_SR_INTERRUPT. In this usage scenario, the Debug Module is implemented in the simulation harness."/>
        <doctext name="txt_4"
            text="3. If set to value &quot;halt&quot;, then operations that would cause entry to Debug mode result in the processor halting. Depending on the simulation environment, this might cause a return from the simulation call with a stop reason of OP_SR_HALT, or debug mode might be implemented by another platform component which then restarts the debugged processor again."/>
        <docsection name="doc"
            text="Debug State Entry">
            <doctext name="txt"
                text="The specification does not define how Debug mode is implemented. In this model, Debug mode is enabled by a Boolean pseudo-register, &quot;DM&quot;. When &quot;DM&quot; is True, the processor is in Debug mode. When &quot;DM&quot; is False, mode is defined by &quot;mstatus&quot; in the usual way."/>
            <doctext name="txt_1"
                text="Entry to Debug mode can be performed in any of these ways:"/>
            <doctext name="txt_2"
                text="1. By writing True to register &quot;DM&quot; (e.g. using opProcessorRegWrite) followed by simulation of at least one cycle (e.g. using opProcessorSimulate), dcsr cause will be reported as trigger;"/>
            <doctext name="txt_3"
                text="2. By writing a 1 then 0 to net &quot;haltreq&quot; (using opNetWrite) followed by simulation of at least one  cycle (e.g. using opProcessorSimulate);"/>
            <doctext name="txt_4"
                text="3. By writing a 1 to net &quot;resethaltreq&quot; (using opNetWrite) while the &quot;reset&quot; signal undergoes a negedge transition, followed by simulation of at least one cycle (e.g. using opProcessorSimulate);"/>
            <doctext name="txt_5"
                text="4. By executing an &quot;ebreak&quot; instruction when Debug mode entry for the current processor mode is enabled by dcsr.ebreakm, dcsr.ebreaks or dcsr.ebreaku."/>
            <doctext name="txt_6"
                text="In all cases, the processor will save required state in &quot;dpc&quot; and &quot;dcsr&quot; and then perform actions described above, depending in the value of the &quot;debug_mode&quot; parameter."/>
        </docsection>
        <docsection name="doc_1"
            text="Debug State Exit">
            <doctext name="txt"
                text="Exit from Debug mode can be performed in any of these ways:"/>
            <doctext name="txt_1"
                text="1. By writing False to register &quot;DM&quot; (e.g. using opProcessorRegWrite) followed by simulation of at least one cycle (e.g. using opProcessorSimulate);"/>
            <doctext name="txt_2"
                text="2. By executing an &quot;dret&quot; instruction when Debug mode."/>
            <doctext name="txt_3"
                text="In both cases, the processor will perform the steps described in section 4.6 (Resume) of the Debug specification."/>
        </docsection>
        <docsection name="doc_2"
            text="Debug Registers">
            <doctext name="txt"
                text="When Debug mode is enabled, registers &quot;dcsr&quot;, &quot;dpc&quot;, &quot;dscratch0&quot; and &quot;dscratch1&quot; are implemented as described in the specification. These may be manipulated externally by a Debug Module using opProcessorRegRead or opProcessorRegWrite; for example, the Debug Module could write &quot;dcsr&quot; to enable &quot;ebreak&quot; instruction behavior as described above, or read and write &quot;dpc&quot; to emulate stepping over an &quot;ebreak&quot; instruction prior to resumption from Debug mode."/>
        </docsection>
        <docsection name="doc_3"
            text="Debug Mode Execution">
            <doctext name="txt"
                text="The specification allows execution of code fragments in Debug mode. A Debug Module implementation can cause execution in Debug mode by the following steps:"/>
            <doctext name="txt_1"
                text="1. Write the address of a Program Buffer to the program counter using opProcessorPCSet;"/>
            <doctext name="txt_2"
                text="2. If &quot;debug_mode&quot; is set to &quot;halt&quot;, write 0 to pseudo-register &quot;DMStall&quot; (to leave halted state);"/>
            <doctext name="txt_3"
                text="3. If entry to Debug mode was handled by exiting the simulation callback, call opProcessorSimulate or opRootModuleSimulate to resume simulation."/>
            <doctext name="txt_4"
                text="Debug mode will be re-entered in these cases:"/>
            <doctext name="txt_5"
                text="1. By execution of an &quot;ebreak&quot; instruction; or:"/>
            <doctext name="txt_6"
                text="2. By execution of an instruction that causes an exception."/>
            <doctext name="txt_7"
                text="In both cases, the processor will either jump to the debug exception address, or return control immediately to the harness, with stopReason of OP_SR_INTERRUPT, or perform a halt, depending on the value of the &quot;debug_mode&quot; parameter."/>
        </docsection>
        <docsection name="doc_4"
            text="Debug Single Step">
            <doctext name="txt"
                text="When in Debug mode, the processor or harness can cause a single instruction to be executed on return from that mode by setting dcsr.step. After one non-Debug-mode instruction has been executed, control will be returned to the harness. The processor will remain in single-step mode until dcsr.step is cleared."/>
        </docsection>
        <docsection name="doc_5"
            text="Debug Ports">
            <doctext name="txt"
                text="Port &quot;DM&quot; is an output signal that indicates whether the processor is in Debug mode"/>
            <doctext name="txt_1"
                text="Port &quot;haltreq&quot; is a rising-edge-triggered signal that triggers entry to Debug mode (see above)."/>
            <doctext name="txt_2"
                text="Port &quot;resethaltreq&quot; is a level-sensitive signal that triggers entry to Debug mode after reset (see above)."/>
        </docsection>
    </docsection>
    <docsection name="doc_11"
        text="Debug Mask">
        <doctext name="txt"
            text="It is possible to enable model debug messages in various categories. This can be done statically using the &quot;override_debugMask&quot; parameter, or dynamically using the &quot;debugflags&quot; command. Enabled messages are specified using a bitmask value, as follows:"/>
        <doctext name="txt_1"
            text="Value 0x002: enable debugging of PMP and virtual memory state;"/>
        <doctext name="txt_2"
            text="Value 0x004: enable debugging of interrupt state."/>
        <doctext name="txt_3"
            text="All other bits in the debug bitmask are reserved and must not be set to non-zero values."/>
    </docsection>
    <docsection name="doc_12"
        text="Integration Support">
        <doctext name="txt"
            text="This model implements a number of non-architectural pseudo-registers and other features to facilitate integration."/>
        <docsection name="doc"
            text="CSR Register External Implementation">
            <doctext name="txt"
                text="If parameter &quot;enable_CSR_bus&quot; is True, an artifact 16-bit bus &quot;CSR&quot; is enabled. Slave callbacks installed on this bus can be used to implement modified CSR behavior (use opBusSlaveNew or icmMapExternalMemory, depending on the client API). A CSR with index 0xABC is mapped on the bus at address 0xABC0; as a concrete example, implementing CSR &quot;time&quot; (number 0xC01) externally requires installation of callbacks at address 0xC010 on the CSR bus."/>
        </docsection>
        <docsection name="doc_1"
            text="LR/SC Active Address">
            <doctext name="txt"
                text="Artifact register &quot;LRSCAddress&quot; shows the active LR/SC lock address. The register holds all-ones if there is no LR/SC operation active or if LR/SC locking is implemented externally as described above."/>
        </docsection>
    </docsection>
    <docsection name="doc_13"
        text="Limitations">
        <doctext name="txt"
            text="Instruction pipelines are not modeled in any way. All instructions are assumed to complete immediately. This means that instruction barrier instructions (e.g. fence.i) are treated as NOPs, with the exception of any Illegal Instruction behavior, which is modeled."/>
        <doctext name="txt_1"
            text="Caches and write buffers are not modeled in any way. All loads, fetches and stores complete immediately and in order, and are fully synchronous. Data barrier instructions (e.g. fence) are treated as NOPs, with the exception of any Illegal Instruction behavior, which is modeled."/>
        <doctext name="txt_2"
            text="Real-world timing effects are not modeled: all instructions are assumed to complete in a single cycle."/>
        <doctext name="txt_3"
            text="Hardware Performance Monitor registers are not implemented and hardwired to zero."/>
    </docsection>
    <docsection name="doc_14"
        text="Verification">
        <doctext name="txt"
            text="All instructions have been extensively tested by Imperas, using tests generated specifically for this model and also reference tests from https://github.com/riscv/riscv-tests."/>
        <doctext name="txt_1"
            text="Also reference tests have been used from various sources including:"/>
        <doctext name="txt_2"
            text="https://github.com/riscv/riscv-tests"/>
        <doctext name="txt_3"
            text="https://github.com/ucb-bar/riscv-torture"/>
        <doctext name="txt_4"
            text="The Imperas OVPsim RISC-V models are used in the RISC-V Foundation Compliance Framework as a functional Golden Reference:"/>
        <doctext name="txt_5"
            text="https://github.com/riscv/riscv-compliance"/>
        <doctext name="txt_6"
            text="where the simulated model is used to provide the reference signatures for compliance testing.  The Imperas OVPsim RISC-V models are used as reference in both open source and commercial instruction stream test generators for hardware design verification, for example:"/>
        <doctext name="txt_7"
            text="http://valtrix.in/sting from Valtrix"/>
        <doctext name="txt_8"
            text="https://github.com/google/riscv-dv from Google"/>
        <doctext name="txt_9"
            text="The Imperas OVPsim RISC-V models are also used by commercial and open source RISC-V Core RTL developers as a reference to ensure correct functionality of their IP."/>
    </docsection>
    <docsection name="doc_15"
        text="References">
        <doctext name="txt"
            text="The Model details are based upon the following specifications:"/>
        <doctext name="txt_1"
            text="RISC-V Instruction Set Manual, Volume I: User-Level ISA (User Architecture Version 20190305-Base-Ratification)"/>
        <doctext name="txt_2"
            text="RISC-V Instruction Set Manual, Volume II: Privileged Architecture (Privileged Architecture Version 20190405-Priv-MSU-Ratification)"/>
    </docsection>
    <docsection name="doc_16"
        text="Instruction Extensions">
        <doctext name="txt"
            text="RISCV processors may add various custom extensions to the basic RISC-V architecture. This processor has been extended, using an extension library, to add Transactional Memory instructions to the Custom0 opcode space."/>
        <doctext name="txt_1"
            text="To enable this extension the read-only CSR register &apos;tm_cfg&apos; must be initialized to the value 1."/>
        <docsection name="doc"
            text="Custom Instructions">
            <doctext name="txt"
                text="This model includes the following custom instructions."/>
            <doctext name="txt_1"
                text="xend"/>
            <doctext name="txt_2"
                text="The xend instruction will terminate an active transaction, committing the cached memory values to memory."/>
            <doctext name="txt_3"
                text="If no transaction is currently active the xabort instruction is a nop."/>
            <doctext name="txt_4"
                text="xbegin"/>
            <doctext name="txt_5"
                text="The value returned in the rd register by the xbegin instruction will be 0 when the transaction has successfully started."/>
            <doctext name="txt_6"
                text="If the transaction subsequently aborts, a jump to the instruction following the xbegin instruction with the register state of the processor restored to the values when the xbegin instruction was executed but with the following bits set in the rd register indicating the cause(s) for the abort:"/>
            <doctext name="txt_7"
                text="Bit 0: a memory conflict occurred with another transaction."/>
            <doctext name="txt_8"
                text="Bit 1: another xbegin instruction was executed while this transaction was active. "/>
            <doctext name="txt_9"
                text="Bit 2: an xabort instruction executed during transaction (See bits 8:15)."/>
            <doctext name="txt_10"
                text="Bit 3: an exception or return from exception occurred during the transaction."/>
            <doctext name="txt_11"
                text="Bit 4: TM buffer overflow - too many cache lines needed."/>
            <doctext name="txt_12"
                text="Bits 8:15: if bit 2 is set then bits 8:15 = bits 7:0 of value passed to xabort, otherwise 0."/>
            <doctext name="txt_13"
                text="xabort"/>
            <doctext name="txt_14"
                text="The xabort transaction instruction will cause a current transaction to abort. The code returned to the aborted xbegin instruction will have bit 2 set and bits 7:15 of the code will contain bits 0:7 of the rsrc register specified on the xabort instruction."/>
            <doctext name="txt_15"
                text="If no transaction is currently active the xabort instruction is a nop."/>
            <doctext name="txt_16"
                text="wfe"/>
            <doctext name="txt_17"
                text="The wfe instruction is a hint that the processor is waiting for an external event before it can proceed. In the simulator, this tells the model to suspend execution until the end of the current simulated quantum of instructions for this processor. (This is the equivalent of executing NOP instructions for the remainder of the quantum, but is more efficient for the simulator.)"/>
            <doctext name="txt_18"
                text="Hardware implementations might put the processor in a low power mode until an interrupt or other signal occurs."/>
            <doctext name="txt_19"
                text="This model includes two FIFO instructions Note: these are blocking instructions."/>
            <doctext name="txt_20"
                text="pushb"/>
            <doctext name="txt_21"
                text="popb"/>
        </docsection>
        <doctext name="txt_2"
            text="RISCV processors may add various custom extensions to the basic RISC-V architecture. This processor has been extended, using an extension library, to add FIFO instructions to the Custom0 opcode space, and FIFO ports."/>
    </docsection>
    <formalattribute name="variant"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Selects variant (either a generic UISA or a specific model)"/>
        </docsection>
        <enum name="RV32X"
            value="0"/>
        <enum name="RV64X"
            value="1"/>
    </formalattribute>
    <formalattribute name="user_version"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify required User Architecture version"/>
        </docsection>
        <enum name="2.2"
            value="0">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="User Architecture Version 2.2"/>
            </docsection>
        </enum>
        <enum name="2.3"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Deprecated and equivalent to 20190305"/>
            </docsection>
        </enum>
        <enum name="20190305"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="User Architecture Version 20190305-Base-Ratification"/>
            </docsection>
        </enum>
    </formalattribute>
    <formalattribute name="priv_version"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify required Privileged Architecture version"/>
        </docsection>
        <enum name="1.10"
            value="0">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Privileged Architecture Version 1.10"/>
            </docsection>
        </enum>
        <enum name="1.11"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Deprecated and equivalent to 20190405"/>
            </docsection>
        </enum>
        <enum name="20190405"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Privileged Architecture Version 20190405-Priv-MSU-Ratification"/>
            </docsection>
        </enum>
        <enum name="master"
            value="3">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Privileged Architecture Master Branch (1.12 draft)"/>
            </docsection>
        </enum>
    </formalattribute>
    <formalattribute name="mstatus_fs_mode"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify conditions causing update of mstatus.FS to dirty"/>
        </docsection>
        <enum name="write_1"
            value="0">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Any non-zero flag result sets mstatus.fs dirty"/>
            </docsection>
        </enum>
        <enum name="write_any"
            value="1">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Any write of flags sets mstatus.fs dirty"/>
            </docsection>
        </enum>
        <enum name="always_dirty"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="mstatus.fs is either off or dirty"/>
            </docsection>
        </enum>
    </formalattribute>
    <formalattribute name="debug_mode"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify how Debug mode is implemented"/>
        </docsection>
        <enum name="none"
            value="0">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Debug mode not implemented"/>
            </docsection>
        </enum>
        <enum name="vector"
            value="1">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Debug mode implemented by execution at vector"/>
            </docsection>
        </enum>
        <enum name="interrupt"
            value="2">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Debug mode implemented by interrupt"/>
            </docsection>
        </enum>
        <enum name="halt"
            value="3">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Debug mode implemented by halt"/>
            </docsection>
        </enum>
    </formalattribute>
    <formalattribute name="ABI_d"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether D registers are used for parameters (ABI SemiHosting)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="verbose"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify verbose output messages"/>
        </docsection>
    </formalattribute>
    <formalattribute name="unaligned"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether the processor supports unaligned memory accesses"/>
        </docsection>
    </formalattribute>
    <formalattribute name="unalignedAMO"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether the processor supports unaligned memory accesses for AMO instructions"/>
        </docsection>
    </formalattribute>
    <formalattribute name="wfi_is_nop"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether WFI should be treated as a NOP (if not, halt while waiting for interrupts)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mtvec_is_ro"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether mtvec CSR is read-only"/>
        </docsection>
    </formalattribute>
    <formalattribute name="tvec_align"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify hardware-enforced alignment of mtvec/stvec/utvec when Vectored interrupt mode enabled"/>
        </docsection>
    </formalattribute>
    <formalattribute name="counteren_mask"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify hardware-enforced mask of writable bits in mcounteren/scounteren registers"/>
        </docsection>
    </formalattribute>
    <formalattribute name="noinhibit_mask"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify hardware-enforced mask of always-zero bits in mcountinhibit register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mtvec_mask"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify hardware-enforced mask of writable bits in mtvec register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="ecode_mask"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify hardware-enforced mask of writable bits in xcause.ExceptionCode"/>
        </docsection>
    </formalattribute>
    <formalattribute name="ecode_nmi"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify xcause.ExceptionCode for NMI"/>
        </docsection>
    </formalattribute>
    <formalattribute name="tval_zero"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether mtval/stval/utval are hard wired to zero"/>
        </docsection>
    </formalattribute>
    <formalattribute name="tval_zero_ebreak"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether mtval/stval/utval are set to zero by an ebreak"/>
        </docsection>
    </formalattribute>
    <formalattribute name="tval_ii_code"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify whether mtval/stval contain faulting instruction bits on illegal instruction exception"/>
        </docsection>
    </formalattribute>
    <formalattribute name="cycle_undefined"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that the cycle CSR is undefined (reads to it are emulated by a Machine mode trap)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="time_undefined"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that the time CSR is undefined (reads to it are emulated by a Machine mode trap)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="instret_undefined"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that the instret CSR is undefined (reads to it are emulated by a Machine mode trap)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="enable_CSR_bus"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Add artifact CSR bus port, allowing CSR registers to be externally implemented"/>
        </docsection>
    </formalattribute>
    <formalattribute name="CSR_remap"
        type="string">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Comma-separated list of CSR number mappings, each of the form &lt;csrName&gt;=&lt;number&gt;"/>
        </docsection>
    </formalattribute>
    <formalattribute name="d_requires_f"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="If D and F extensions are separately enabled in the misa CSR, whether D is enabled only if F is enabled"/>
        </docsection>
    </formalattribute>
    <formalattribute name="xret_preserves_lr"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Whether an xRET instruction preserves the value of LR"/>
        </docsection>
    </formalattribute>
    <formalattribute name="trigger_num"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify the number of implemented hardware triggers"/>
        </docsection>
    </formalattribute>
    <formalattribute name="lr_sc_grain"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify byte granularity of ll/sc lock region (constrained to a power of two)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="reset_address"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override reset vector address"/>
        </docsection>
    </formalattribute>
    <formalattribute name="nmi_address"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override NMI vector address"/>
        </docsection>
    </formalattribute>
    <formalattribute name="PMP_grain"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify PMP region granularity, G (0 =&gt; 4 bytes, 1 =&gt; 8 bytes, etc)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="PMP_registers"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify the number of implemented PMP address registers"/>
        </docsection>
    </formalattribute>
    <formalattribute name="PMP_max_page"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify the maximum size of PMP region to map if non-zero (may improve performance; constrained to a power of two)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="PMP_decompose"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Whether unaligned PMP accesses are decomposed into separate aligned accesses"/>
        </docsection>
    </formalattribute>
    <formalattribute name="local_int_num"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify number of supplemental local interrupts"/>
        </docsection>
    </formalattribute>
    <formalattribute name="unimp_int_mask"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify mask of unimplemented interrupts (e.g. 1&lt;&lt;9 indicates Supervisor external interrupt unimplemented)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="force_mideleg"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify mask of interrupts always delegated to lower-priority execution level from Machine execution level"/>
        </docsection>
    </formalattribute>
    <formalattribute name="no_ideleg"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify mask of interrupts that cannot be delegated to lower-priority execution levels"/>
        </docsection>
    </formalattribute>
    <formalattribute name="no_edeleg"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify mask of exceptions that cannot be delegated to lower-priority execution levels"/>
        </docsection>
    </formalattribute>
    <formalattribute name="external_int_id"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Whether to add nets allowing External Interrupt ID codes to be forced"/>
        </docsection>
    </formalattribute>
    <formalattribute name="endianFixed"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that data endianness is fixed (mstatus.{MBE,SBE,UBE} fields are read-only)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="misa_MXL"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override default value of misa.MXL"/>
        </docsection>
    </formalattribute>
    <formalattribute name="misa_Extensions"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override default value of misa.Extensions"/>
        </docsection>
    </formalattribute>
    <formalattribute name="add_Extensions"
        type="string">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Add extensions specified by letters to misa.Extensions (for example, specify &quot;VD&quot; to add V and D features)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="misa_Extensions_mask"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override mask of writable bits in misa.Extensions"/>
        </docsection>
    </formalattribute>
    <formalattribute name="add_Extensions_mask"
        type="string">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Add extensions specified by letters to mask of writable bits in misa.Extensions (for example, specify &quot;VD&quot; to add V and D features)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mvendorid"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override mvendorid register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="marchid"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override marchid register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mimpid"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override mimpid register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mhartid"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override mhartid register (or first mhartid of an incrementing sequence if this is an SMP variant)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mtvec"
        type="uns64">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override mtvec register"/>
        </docsection>
    </formalattribute>
    <formalattribute name="mstatus_FS"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Override default value of mstatus.FS (initial state of floating point unit)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="Zfh"
        type="bool">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that Zfh is implemented (IEEE half-precision floating point is supported)"/>
        </docsection>
    </formalattribute>
    <formalattribute name="Zfinx_version"
        type="enumeration">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify that Zfinx is implemented (use integer register file for floating point instructions)"/>
        </docsection>
        <enum name="none"
            value="0">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Zfinx not implemented"/>
            </docsection>
        </enum>
        <enum name="0.4"
            value="1">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Zfinx version 0.4"/>
            </docsection>
        </enum>
    </formalattribute>
    <formalattribute name="CLICLEVELS"
        type="uns32">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Specify number of interrupt levels implemented by CLIC, or 0 if CLIC absent"/>
        </docsection>
    </formalattribute>
    <busmasterport addresswidth="34"
        addresswidthmax="34"
        addresswidthmin="32"
        mustbeconnected="T"
        name="INSTRUCTION">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Instruction bus"/>
        </docsection>
    </busmasterport>
    <busmasterport addresswidth="34"
        addresswidthmax="34"
        addresswidthmin="32"
        mustbeconnected="F"
        name="DATA">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Data bus"/>
        </docsection>
    </busmasterport>
    <netport mustbeconnected="F"
        name="reset"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Reset"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="reset_addr"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="externally-applied reset address"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="nmi"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="NMI"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="nmi_addr"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="externally-applied NMI address"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="MSWInterrupt"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Machine software interrupt"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="MTimerInterrupt"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Machine timer interrupt"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="MExternalInterrupt"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Machine external interrupt"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="LocalInterrupt5"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Local Interrupt 5"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="LocalInterrupt6"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Local Interrupt 6"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="irq_ack_o"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="interrupt acknowledge (pulse)"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="irq_id_o"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="acknowledged interrupt id (valid during irq_ack_o pulse)"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="sec_lvl_o"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="current privilege level"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="LR_address"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Port written with effective address for LR instruction"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="SC_address"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Port written with effective address for SC instruction"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="SC_valid"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="SC_address valid input signal"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="AMO_active"
        type="output">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Port written with code indicating active AMO"/>
        </docsection>
    </netport>
    <netport mustbeconnected="F"
        name="deferint"
        type="input">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Artifact signal causing interrupts to be held off when high"/>
        </docsection>
    </netport>
    <fifoport name="fifoPortIn"
        type="input"
        width="32"/>
    <fifoport name="fifoPortOut"
        type="output"
        width="32"/>
    <command name="printCustomRegs">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Show values of all custom registers"/>
        </docsection>
    </command>
    <command name="isync">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="specify instruction address range for synchronous execution"/>
        </docsection>
        <commandarg name="addresshi"
            type="Uns64">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="end address of synchronous execution range"/>
            </docsection>
        </commandarg>
        <commandarg name="addresslo"
            type="Uns64">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="start address of synchronous execution range"/>
            </docsection>
        </commandarg>
    </command>
    <command name="itrace">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="enable or disable instruction tracing"/>
        </docsection>
        <commandarg name="after"
            type="Uns64">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="apply after this many instructions"/>
            </docsection>
        </commandarg>
        <commandarg name="enable"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="enable instruction tracing"/>
            </docsection>
        </commandarg>
        <commandarg name="instructioncount"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="include the instruction number in each trace"/>
            </docsection>
        </commandarg>
        <commandarg name="off"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="disable instruction tracing"/>
            </docsection>
        </commandarg>
        <commandarg name="on"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="enable instruction tracing"/>
            </docsection>
        </commandarg>
        <commandarg name="registerchange"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="show registers changed by this instruction"/>
            </docsection>
        </commandarg>
        <commandarg name="registers"
            type="Boolean">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="show registers after each trace"/>
            </docsection>
        </commandarg>
    </command>
    <command name="diagnostic">
        <docsection name="doc"
            text="Description">
            <doctext name="txt"
                text="Set how much additional information is reported for the library"/>
        </docsection>
        <commandarg name="level"
            type="Int32">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Higher numbers print more diagnostic information
                                         0 = off (initial)
                                         1 = startup and shutdown
                                         2 = changes of major modes, infrequent commands
                                         3 = full noisy"/>
            </docsection>
        </commandarg>
    </command>
    <exceptions name="Exceptions">
        <exception code="0"
            name="InstructionAddressMisaligned">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Fetch from unaligned address"/>
            </docsection>
        </exception>
        <exception code="1"
            name="InstructionAccessFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="No access permission for fetch"/>
            </docsection>
        </exception>
        <exception code="2"
            name="IllegalInstruction">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Undecoded, unimplemented or disabled instruction"/>
            </docsection>
        </exception>
        <exception code="3"
            name="Breakpoint">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="EBREAK instruction executed"/>
            </docsection>
        </exception>
        <exception code="4"
            name="LoadAddressMisaligned">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Load from unaligned address"/>
            </docsection>
        </exception>
        <exception code="5"
            name="LoadAccessFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="No access permission for load"/>
            </docsection>
        </exception>
        <exception code="6"
            name="StoreAMOAddressMisaligned">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Store/atomic memory operation at unaligned address"/>
            </docsection>
        </exception>
        <exception code="7"
            name="StoreAMOAccessFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="No access permission for store/atomic memory operation"/>
            </docsection>
        </exception>
        <exception code="8"
            name="EnvironmentCallFromUMode">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="ECALL instruction executed in User mode"/>
            </docsection>
        </exception>
        <exception code="11"
            name="EnvironmentCallFromMMode">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="ECALL instruction executed in Machine mode"/>
            </docsection>
        </exception>
        <exception code="12"
            name="InstructionPageFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Page fault at fetch address"/>
            </docsection>
        </exception>
        <exception code="13"
            name="LoadPageFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Page fault at load address"/>
            </docsection>
        </exception>
        <exception code="15"
            name="StoreAMOPageFault">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Page fault at store/atomic memory operation address"/>
            </docsection>
        </exception>
        <exception code="24"
            name="EXCEPT24">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Custom Exception 24"/>
            </docsection>
        </exception>
        <exception code="67"
            name="MSWInterrupt">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Machine software interrupt"/>
            </docsection>
        </exception>
        <exception code="71"
            name="MTimerInterrupt">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Machine timer interrupt"/>
            </docsection>
        </exception>
        <exception code="75"
            name="MExternalInterrupt">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Machine external interrupt"/>
            </docsection>
        </exception>
        <exception code="85"
            name="LocalInterrupt5">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Local interrupt 5"/>
            </docsection>
        </exception>
        <exception code="86"
            name="LocalInterrupt6">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Local interrupt 6"/>
            </docsection>
        </exception>
    </exceptions>
    <modes name="Modes">
        <mode code="0"
            name="User">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="User mode"/>
            </docsection>
        </mode>
        <mode code="3"
            name="Machine">
            <docsection name="doc"
                text="Description">
                <doctext name="txt"
                    text="Machine mode"/>
            </docsection>
        </mode>
    </modes>
    <registers name="Core">
        <register alias="F"
            name="zero"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="ra"
            readonly="F"
            type="4"
            width="32"/>
        <register alias="F"
            name="sp"
            readonly="F"
            type="2"
            width="32"/>
        <register alias="F"
            name="gp"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="tp"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t0"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t1"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t2"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s0"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s1"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a0"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a1"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a2"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="a7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s2"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s8"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s9"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s10"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="s11"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="t6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pc"
            readonly="F"
            type="1"
            width="32"/>
    </registers>
    <registers name="Floating_point">
        <register alias="F"
            name="ft0"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft1"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft2"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft3"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft4"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft5"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft6"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft7"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs0"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs1"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa0"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa1"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa2"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa3"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa4"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa5"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa6"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fa7"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs2"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs3"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs4"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs5"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs6"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs7"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs8"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs9"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs10"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="fs11"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft8"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft9"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft10"
            readonly="F"
            type="0"
            width="64"/>
        <register alias="F"
            name="ft11"
            readonly="F"
            type="0"
            width="64"/>
    </registers>
    <registers name="User_Control_and_Status">
        <register alias="F"
            name="fflags"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="frm"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="fcsr"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="cycle"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="time"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="instret"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter3"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter4"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter5"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter6"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter7"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter8"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter9"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter10"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter11"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter12"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter13"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter14"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter15"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter16"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter17"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter18"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter19"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter20"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter21"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter22"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter23"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter24"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter25"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter26"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter27"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter28"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter29"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter30"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounter31"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="cycleh"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="timeh"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="instreth"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh3"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh4"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh5"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh6"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh7"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh8"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh9"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh10"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh11"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh12"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh13"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh14"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh15"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh16"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh17"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh18"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh19"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh20"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh21"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh22"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh23"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh24"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh25"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh26"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh27"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh28"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh29"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh30"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="hpmcounterh31"
            readonly="T"
            type="0"
            width="32"/>
    </registers>
    <registers name="Machine_Control_and_Status">
        <register alias="F"
            name="mstatus"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="misa"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mie"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mtvec"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mcounteren"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mcountinhibit"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent8"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent9"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent10"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent11"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent12"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent13"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent14"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent15"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent16"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent17"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent18"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent19"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent20"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent21"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent22"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent23"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent24"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent25"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent26"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent27"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent28"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent29"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent30"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmevent31"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mscratch"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mepc"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mcause"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mtval"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mip"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpcfg0"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpcfg1"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpcfg2"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpcfg3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr0"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr1"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr2"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr8"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr9"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr10"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr11"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr12"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr13"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr14"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="pmpaddr15"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mcycle"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="minstret"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter8"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter9"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter10"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter11"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter12"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter13"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter14"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter15"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter16"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter17"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter18"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter19"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter20"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter21"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter22"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter23"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter24"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter25"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter26"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter27"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter28"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter29"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter30"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounter31"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mcycleh"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="minstreth"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh3"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh4"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh5"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh6"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh7"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh8"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh9"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh10"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh11"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh12"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh13"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh14"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh15"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh16"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh17"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh18"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh19"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh20"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh21"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh22"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh23"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh24"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh25"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh26"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh27"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh28"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh29"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh30"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhpmcounterh31"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="custom_rw1_32"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="custom_rw2_64"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="custom_rw3_32"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="custom_rw4_64"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="mvendorid"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="marchid"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="mimpid"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="mhartid"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="custom_ro1"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="tm_cfg"
            readonly="T"
            type="0"
            width="32"/>
        <register alias="F"
            name="fifo_cfg"
            readonly="T"
            type="0"
            width="32"/>
    </registers>
    <registers name="Integration_support">
        <register alias="F"
            name="LRSCAddress"
            readonly="F"
            type="0"
            width="32"/>
        <register alias="F"
            name="commercial"
            readonly="T"
            type="0"
            width="8"/>
    </registers>
    <fileversion major="1"
        minor="0"
        name="_version_0"/>
 </processor>
